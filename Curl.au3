; ============================================================================================================================
; File		: Curl.au3 (2022.03.25)
; Purpose	: libcurl with x64 support
; Author	: Ward
; Modified  : Brian J Christy (Beege)

; Source	: libcurl 7.82.0
; Author	: Copyright (C) 1997 - 2015 by Daniel Stenberg.
; Website	: https://curl.se/windows
; ============================================================================================================================

; ============================================================================================================================
; Public Functions:
;   Curl_Escape($String, $Encode = 1)
;   Curl_Unescape($String, $Encode = 1)
;   Curl_FormAdd(ByRef $FirstItem, ByRef $LastItem, $Option1, $Value1, $Option2, $Value2 = 0, $Option3 = 0, $Value3 = 0, $Option4 = 0, $Value4 = 0, $Option5 = 0, $Value5 = 0, $Option6 = 0, $Value6 = 0, $Option7 = 0, $Value7 = 0, $Option8 = 0, $Value8 = 0, $Option9 = 0, $Value9 = 0, $Option10 = 0, $Value10 = 0, $Option11 = 0, $Value11 = 0, $Option12 = 0, $Value12 = 0, $Option13 = 0, $Value13 = 0, $Option14 = 0, $Value14 = 0, $Option15 = 0, $Value15 = 0, $Option16 = 0, $Value16 = 0, $Option17 = 0, $Value17 = 0, $Option18 = 0, $Value18 = 0, $Option19 = 0, $Value19 = 0, $Option20 = 0, $Value20 = 0)
;   Curl_FormFree($FirstItem)
;   Curl_Free($Ptr)
;   Curl_GetDate($DateString, $Now = 0)
;   Curl_Global_Cleanup($Flag)
;   Curl_Global_Init($Flag)
;   Curl_Global_Init_Mem($Flag, $MallocCB, $FreeCB, $ReallocCB, $StrdupCB, $CallocCB)
;   Curl_Slist_Append($List, $String = "", $AutoSplit = False)
;   Curl_Slist_Free_All($List)
;   Curl_Version()
;   Curl_Version_Info($Type = $CURLVERSION_NOW)
;   Curl_Easy_Escape($Handle, $String, $Encode = 1)
;   Curl_Easy_Init()
;   Curl_Easy_Cleanup($Handle)
;   Curl_Easy_DupHandle($Handle)
;   Curl_Easy_GetInfo($Handle, $Info)
;   Curl_Easy_Pause($Handle, $BitMask = $CURLPAUSE_ALL)
;   Curl_Easy_Perform($Handle)
;   Curl_Easy_Recv($Handle, $BufferLen = 65536)
;   Curl_Easy_Reset($Handle)
;   Curl_Easy_Send($Handle, $Data)
;   Curl_Easy_Setopt($Handle, $Option, $Value)
;   Curl_Easy_StrError($ErrorNum)
;   Curl_Easy_Unescape($Handle, $String, $Encode = 1)
;   Curl_Multi_Add_Handle($Handle, $EzHandle)
;   Curl_Multi_Cleanup($Handle)
;   Curl_Multi_Info_Read($Handle, ByRef $MsgsInQueue)
;   Curl_Multi_Init()
;   Curl_Multi_Perform($Handle, ByRef $RunningHandles)
;   Curl_Multi_Remove_Handle($Handle, $EzHandle)
;   Curl_Multi_Setopt($Handle, $Option, $Value)
;   Curl_Multi_StrError($ErrorNum)
;   Curl_DataWriteCallback()
;   Curl_DataReadCallback()
;   Curl_FileWriteCallback()
;   Curl_FileReadCallback()
;   Curl_Data_Put($Handle, $Data)
;   Curl_Data_Get($Handle)
;   Curl_Data_Cleanup($Handle)
;   Curl_Slist_ToArray($List)
; ============================================================================================================================

#include-once

#Region constants
Global Const $CURL_SOCKET_BAD = -1

Global Const $HTTPPOST_FILENAME = BitShift(1, -0)
Global Const $HTTPPOST_READFILE = BitShift(1, -1)
Global Const $HTTPPOST_PTRNAME = BitShift(1, -2)
Global Const $HTTPPOST_PTRCONTENTS = BitShift(1, -3)
Global Const $HTTPPOST_BUFFER = BitShift(1, -4)
Global Const $HTTPPOST_PTRBUFFER = BitShift(1, -5)
Global Const $HTTPPOST_CALLBACK = BitShift(1, -6)

Global Const $CURL_MAX_WRITE_SIZE = 16384
Global Const $CURL_MAX_HTTP_HEADER = 100 * 1024
Global Const $CURL_WRITEFUNC_PAUSE = 0x10000001

Global Enum _
		$CURLFILETYPE_FILE, _
		$CURLFILETYPE_DIRECTORY, _
		$CURLFILETYPE_SYMLINK, _
		$CURLFILETYPE_DEVICE_BLOCK, _
		$CURLFILETYPE_DEVICE_CHAR, _
		$CURLFILETYPE_NAMEDPIPE, _
		$CURLFILETYPE_SOCKET, _
		$CURLFILETYPE_DOOR, _
		$CURLFILETYPE_UNKNOWN

Global Const $CURLFINFOFLAG_KNOWN_FILENAME = BitShift(1, -0)
Global Const $CURLFINFOFLAG_KNOWN_FILETYPE = BitShift(1, -1)
Global Const $CURLFINFOFLAG_KNOWN_TIME = BitShift(1, -2)
Global Const $CURLFINFOFLAG_KNOWN_PERM = BitShift(1, -3)
Global Const $CURLFINFOFLAG_KNOWN_UID = BitShift(1, -4)
Global Const $CURLFINFOFLAG_KNOWN_GID = BitShift(1, -5)
Global Const $CURLFINFOFLAG_KNOWN_SIZE = BitShift(1, -6)
Global Const $CURLFINFOFLAG_KNOWN_HLINKCOUNT = BitShift(1, -7)

Global Const $CURL_CHUNK_BGN_FUNC_OK = 0
Global Const $CURL_CHUNK_BGN_FUNC_FAIL = 1
Global Const $CURL_CHUNK_BGN_FUNC_SKIP = 2

Global Const $CURL_CHUNK_END_FUNC_OK = 0
Global Const $CURL_CHUNK_END_FUNC_FAIL = 1

Global Const $CURL_FNMATCHFUNC_MATCH = 0
Global Const $CURL_FNMATCHFUNC_NOMATCH = 1
Global Const $CURL_FNMATCHFUNC_FAIL = 2

Global Const $CURL_SEEKFUNC_OK = 0
Global Const $CURL_SEEKFUNC_FAIL = 1
Global Const $CURL_SEEKFUNC_CANTSEEK = 2

Global Const $CURL_READFUNC_ABORT = 0x10000000
Global Const $CURL_READFUNC_PAUSE = 0x10000001

Global Enum _
		$CURLSOCKTYPE_IPCXN, _
		$CURLSOCKTYPE_ACCEPT, _
		$CURLSOCKTYPE_LAST

Global Const $CURL_SOCKOPT_OK = 0
Global Const $CURL_SOCKOPT_ERROR = 1
Global Const $CURL_SOCKOPT_ALREADY_CONNECTED = 2

Global Enum _
		$CURLIOE_OK, _
		$CURLIOE_UNKNOWNCMD, _
		$CURLIOE_FAILRESTART, _
		$CURLIOE_LAST

Global Enum _
		$CURLIOCMD_NOP, _
		$CURLIOCMD_RESTARTREAD, _
		$CURLIOCMD_LAST

Global Enum _
		$CURLINFO_TEXT, _
		$CURLINFO_HEADER_IN, _
		$CURLINFO_HEADER_OUT, _
		$CURLINFO_DATA_IN, _
		$CURLINFO_DATA_OUT, _
		$CURLINFO_SSL_DATA_IN, _
		$CURLINFO_SSL_DATA_OUT, _
		$CURLINFO_END

Global Enum _
		$CURLE_OK, _
		$CURLE_UNSUPPORTED_PROTOCOL, _
		$CURLE_FAILED_INIT, _
		$CURLE_URL_MALFORMAT, _
		$CURLE_NOT_BUILT_IN, _
		$CURLE_COULDNT_RESOLVE_PROXY, _
		$CURLE_COULDNT_RESOLVE_HOST, _
		$CURLE_COULDNT_CONNECT, _
		$CURLE_FTP_WEIRD_SERVER_REPLY, _
		$CURLE_REMOTE_ACCESS_DENIED, _
		$CURLE_FTP_ACCEPT_FAILED, _
		$CURLE_FTP_WEIRD_PASS_REPLY, _
		$CURLE_FTP_ACCEPT_TIMEOUT, _
		$CURLE_FTP_WEIRD_PASV_REPLY, _
		$CURLE_FTP_WEIRD_227_FORMAT, _
		$CURLE_FTP_CANT_GET_HOST, _
		$CURLE_HTTP2, _
		$CURLE_FTP_COULDNT_SET_TYPE, _
		$CURLE_PARTIAL_FILE, _
		$CURLE_FTP_COULDNT_RETR_FILE, _
		$CURLE_OBSOLETE20, _
		$CURLE_QUOTE_ERROR, _
		$CURLE_HTTP_RETURNED_ERROR, _
		$CURLE_WRITE_ERROR, _
		$CURLE_OBSOLETE24, _
		$CURLE_UPLOAD_FAILED, _
		$CURLE_READ_ERROR, _
		$CURLE_OUT_OF_MEMORY, _
		$CURLE_OPERATION_TIMEDOUT, _
		$CURLE_OBSOLETE29, _
		$CURLE_FTP_PORT_FAILED, _
		$CURLE_FTP_COULDNT_USE_REST, _
		$CURLE_OBSOLETE32, _
		$CURLE_RANGE_ERROR, _
		$CURLE_HTTP_POST_ERROR, _
		$CURLE_SSL_CONNECT_ERROR, _
		$CURLE_BAD_DOWNLOAD_RESUME, _
		$CURLE_FILE_COULDNT_READ_FILE, _
		$CURLE_LDAP_CANNOT_BIND, _
		$CURLE_LDAP_SEARCH_FAILED, _
		$CURLE_OBSOLETE40, _
		$CURLE_FUNCTION_NOT_FOUND, _
		$CURLE_ABORTED_BY_CALLBACK, _
		$CURLE_BAD_FUNCTION_ARGUMENT, _
		$CURLE_OBSOLETE44, _
		$CURLE_INTERFACE_FAILED, _
		$CURLE_OBSOLETE46, _
		$CURLE_TOO_MANY_REDIRECTS, _
		$CURLE_UNKNOWN_OPTION, _
		$CURLE_TELNET_OPTION_SYNTAX, _
		$CURLE_OBSOLETE50, _
		$CURLE_PEER_FAILED_VERIFICATION, _
		$CURLE_GOT_NOTHING, _
		$CURLE_SSL_ENGINE_NOTFOUND, _
		$CURLE_SSL_ENGINE_SETFAILED, _
		$CURLE_SEND_ERROR, _
		$CURLE_RECV_ERROR, _
		$CURLE_OBSOLETE57, _
		$CURLE_SSL_CERTPROBLEM, _
		$CURLE_SSL_CIPHER, _
		$CURLE_SSL_CACERT, _
		$CURLE_BAD_CONTENT_ENCODING, _
		$CURLE_LDAP_INVALID_URL, _
		$CURLE_FILESIZE_EXCEEDED, _
		$CURLE_USE_SSL_FAILED, _
		$CURLE_SEND_FAIL_REWIND, _
		$CURLE_SSL_ENGINE_INITFAILED, _
		$CURLE_LOGIN_DENIED, _
		$CURLE_TFTP_NOTFOUND, _
		$CURLE_TFTP_PERM, _
		$CURLE_REMOTE_DISK_FULL, _
		$CURLE_TFTP_ILLEGAL, _
		$CURLE_TFTP_UNKNOWNID, _
		$CURLE_REMOTE_FILE_EXISTS, _
		$CURLE_TFTP_NOSUCHUSER, _
		$CURLE_CONV_FAILED, _
		$CURLE_CONV_REQD, _
		$CURLE_SSL_CACERT_BADFILE, _
		$CURLE_REMOTE_FILE_NOT_FOUND, _
		$CURLE_SSH, _
		$CURLE_SSL_SHUTDOWN_FAILED, _
		$CURLE_AGAIN, _
		$CURLE_SSL_CRL_BADFILE, _
		$CURLE_SSL_ISSUER_ERROR, _
		$CURLE_FTP_PRET_FAILED, _
		$CURLE_RTSP_CSEQ_ERROR, _
		$CURLE_RTSP_SESSION_ERROR, _
		$CURLE_FTP_BAD_FILE_LIST, _
		$CURLE_CHUNK_FAILED, _
		$CURLE_NO_CONNECTION_AVAILABLE, _
		$CURLE_SSL_PINNEDPUBKEYNOTMATCH, _
		$CURLE_SSL_INVALIDCERTSTATUS, _
		$CURLE_HTTP2_STREAM, _            ;/* 92 - stream error in HTTP/2 framing layer
		$CURLE_RECURSIVE_API_CALL, _      ;/* 93 - an api function was called from inside a callback */
		$CURLE_AUTH_ERROR, _              ;/* 94 - an authentication function returned an error */
		$CURLE_HTTP3, _                   ;/* 95 - An HTTP/3 layer problem */
		$CURLE_QUIC_CONNECT_ERROR, _      ;/* 96 - QUIC connection error */
		$CURLE_PROXY, _                   ;/* 97 - proxy handshake error */
		$CURLE_SSL_CLIENTCERT, _          ;/* 98 - client-side certificate required */
		$CURL_LAST

Global Enum _
		$CURLPROXY_HTTP = 0, _
		$CURLPROXY_HTTP_1_0 = 1, _
		$CURLPROXY_SOCKS4 = 4, _
		$CURLPROXY_SOCKS5 = 5, _
		$CURLPROXY_SOCKS4A = 6, _
		$CURLPROXY_SOCKS5_HOSTNAME = 7

Global Const $CURLAUTH_NONE = 0
Global Const $CURLAUTH_BASIC = BitShift(1, -0)
Global Const $CURLAUTH_DIGEST = BitShift(1, -1)
Global Const $CURLAUTH_NEGOTIATE = BitShift(1, -2)
Global Const $CURLAUTH_GSSNEGOTIATE = $CURLAUTH_NEGOTIATE
Global Const $CURLAUTH_NTLM = BitShift(1, -3)
Global Const $CURLAUTH_DIGEST_IE = BitShift(1, -4)
Global Const $CURLAUTH_NTLM_WB = BitShift(1, -5)
Global Const $CURLAUTH_ONLY = BitShift(1, -31)
Global Const $CURLAUTH_ANY = BitNOT($CURLAUTH_DIGEST_IE)
Global Const $CURLAUTH_ANYSAFE = BitNOT(BitOR($CURLAUTH_BASIC, $CURLAUTH_DIGEST_IE))

Global Const $CURLSSH_AUTH_ANY = BitNOT(0)
Global Const $CURLSSH_AUTH_NONE = 0
Global Const $CURLSSH_AUTH_PUBLICKEY = BitShift(1, -0)
Global Const $CURLSSH_AUTH_PASSWORD = BitShift(1, -1)
Global Const $CURLSSH_AUTH_HOST = BitShift(1, -2)
Global Const $CURLSSH_AUTH_KEYBOARD = BitShift(1, -3)
Global Const $CURLSSH_AUTH_AGENT = BitShift(1, -4)
Global Const $CURLSSH_AUTH_DEFAULT = $CURLSSH_AUTH_ANY

Global Const $CURLGSSAPI_DELEGATION_NONE = 0
Global Const $CURLGSSAPI_DELEGATION_POLICY_FLAG = BitShift(1, -0)
Global Const $CURLGSSAPI_DELEGATION_FLAG = BitShift(1, -1)

Global Const $CURL_ERROR_SIZE = 256

Global Enum _
		$CURLKHTYPE_UNKNOWN, _
		$CURLKHTYPE_RSA1, _
		$CURLKHTYPE_RSA, _
		$CURLKHTYPE_DSS

Global Enum _
		$CURLKHSTAT_FINE_ADD_TO_FILE, _
		$CURLKHSTAT_FINE, _
		$CURLKHSTAT_REJECT, _
		$CURLKHSTAT_DEFER, _
		$CURLKHSTAT_LAST

Global Enum _
		$CURLKHMATCH_OK, _
		$CURLKHMATCH_MISMATCH, _
		$CURLKHMATCH_MISSING, _
		$CURLKHMATCH_LAST

Global Enum _
		$CURLUSESSL_NONE, _
		$CURLUSESSL_TRY, _
		$CURLUSESSL_CONTROL, _
		$CURLUSESSL_ALL, _
		$CURLUSESSL_LAST

Global Const $CURLSSLOPT_ALLOW_BEAST = BitShift(1, -0)

Global Enum _
		$CURLFTPSSL_CCC_NONE, _
		$CURLFTPSSL_CCC_PASSIVE, _
		$CURLFTPSSL_CCC_ACTIVE, _
		$CURLFTPSSL_CCC_LAST

Global Enum _
		$CURLFTPAUTH_DEFAULT, _
		$CURLFTPAUTH_SSL, _
		$CURLFTPAUTH_TLS, _
		$CURLFTPAUTH_LAST

Global Enum _
		$CURLFTP_CREATE_DIR_NONE, _
		$CURLFTP_CREATE_DIR, _
		$CURLFTP_CREATE_DIR_RETRY, _
		$CURLFTP_CREATE_DIR_LAST

Global Enum _
		$CURLFTPMETHOD_DEFAULT, _
		$CURLFTPMETHOD_MULTICWD, _
		$CURLFTPMETHOD_NOCWD, _
		$CURLFTPMETHOD_SINGLECWD, _
		$CURLFTPMETHOD_LAST

Global Const $CURLHEADER_UNIFIED = 0
Global Const $CURLHEADER_SEPARATE = 1

Global Const $CURLPROTO_HTTP = BitShift(1, -0)
Global Const $CURLPROTO_HTTPS = BitShift(1, -1)
Global Const $CURLPROTO_FTP = BitShift(1, -2)
Global Const $CURLPROTO_FTPS = BitShift(1, -3)
Global Const $CURLPROTO_SCP = BitShift(1, -4)
Global Const $CURLPROTO_SFTP = BitShift(1, -5)
Global Const $CURLPROTO_TELNET = BitShift(1, -6)
Global Const $CURLPROTO_LDAP = BitShift(1, -7)
Global Const $CURLPROTO_LDAPS = BitShift(1, -8)
Global Const $CURLPROTO_DICT = BitShift(1, -9)
Global Const $CURLPROTO_FILE = BitShift(1, -10)
Global Const $CURLPROTO_TFTP = BitShift(1, -11)
Global Const $CURLPROTO_IMAP = BitShift(1, -12)
Global Const $CURLPROTO_IMAPS = BitShift(1, -13)
Global Const $CURLPROTO_POP3 = BitShift(1, -14)
Global Const $CURLPROTO_POP3S = BitShift(1, -15)
Global Const $CURLPROTO_SMTP = BitShift(1, -16)
Global Const $CURLPROTO_SMTPS = BitShift(1, -17)
Global Const $CURLPROTO_RTSP = BitShift(1, -18)
Global Const $CURLPROTO_RTMP = BitShift(1, -19)
Global Const $CURLPROTO_RTMPT = BitShift(1, -20)
Global Const $CURLPROTO_RTMPE = BitShift(1, -21)
Global Const $CURLPROTO_RTMPTE = BitShift(1, -22)
Global Const $CURLPROTO_RTMPS = BitShift(1, -23)
Global Const $CURLPROTO_RTMPTS = BitShift(1, -24)
Global Const $CURLPROTO_GOPHER = BitShift(1, -25)
Global Const $CURLPROTO_SMB = BitShift(1, -26)
Global Const $CURLPROTO_SMBS = BitShift(1, -27)
Global Const $CURLPROTO_MQTT = BitShift(1, -28)
Global Const $CURLPROTO_GOPHERS = BitShift(1, -29)
Global Const $CURLPROTO_ALL = BitNOT(0)

Global Const $CURLOPTTYPE_LONG = 0
Global Const $CURLOPTTYPE_OBJECTPOINT = 10000
Global Const $CURLOPTTYPE_FUNCTIONPOINT = 20000
Global Const $CURLOPTTYPE_OFF_T = 30000
Global Const $CURLOPTTYPE_BLOB = 40000

Global Const $CURLOPTTYPE_STRINGPOINT = $CURLOPTTYPE_OBJECTPOINT
Global Const $CURLOPTTYPE_SLISTPOINT = $CURLOPTTYPE_OBJECTPOINT
Global Const $CURLOPTTYPE_CBPOINT = $CURLOPTTYPE_OBJECTPOINT
Global Const $CURLOPTTYPE_VALUES = $CURLOPTTYPE_LONG

Global Enum _
		$CURLOPT_WRITEDATA = $CURLOPTTYPE_OBJECTPOINT + 1, _
		$CURLOPT_URL = $CURLOPTTYPE_OBJECTPOINT + 2, _
		$CURLOPT_PORT = $CURLOPTTYPE_LONG + 3, _
		$CURLOPT_PROXY = $CURLOPTTYPE_OBJECTPOINT + 4, _
		$CURLOPT_USERPWD = $CURLOPTTYPE_OBJECTPOINT + 5, _
		$CURLOPT_PROXYUSERPWD = $CURLOPTTYPE_OBJECTPOINT + 6, _
		$CURLOPT_RANGE = $CURLOPTTYPE_OBJECTPOINT + 7, _
		$CURLOPT_READDATA = $CURLOPTTYPE_OBJECTPOINT + 9, _
		$CURLOPT_ERRORBUFFER = $CURLOPTTYPE_OBJECTPOINT + 10, _
		$CURLOPT_WRITEFUNCTION = $CURLOPTTYPE_FUNCTIONPOINT + 11, _
		$CURLOPT_READFUNCTION = $CURLOPTTYPE_FUNCTIONPOINT + 12, _
		$CURLOPT_TIMEOUT = $CURLOPTTYPE_LONG + 13, _
		$CURLOPT_INFILESIZE = $CURLOPTTYPE_LONG + 14, _
		$CURLOPT_POSTFIELDS = $CURLOPTTYPE_OBJECTPOINT + 15, _
		$CURLOPT_REFERER = $CURLOPTTYPE_OBJECTPOINT + 16, _
		$CURLOPT_FTPPORT = $CURLOPTTYPE_OBJECTPOINT + 17, _
		$CURLOPT_USERAGENT = $CURLOPTTYPE_OBJECTPOINT + 18, _
		$CURLOPT_LOW_SPEED_LIMIT = $CURLOPTTYPE_LONG + 19, _
		$CURLOPT_LOW_SPEED_TIME = $CURLOPTTYPE_LONG + 20, _
		$CURLOPT_RESUME_FROM = $CURLOPTTYPE_LONG + 21, _
		$CURLOPT_COOKIE = $CURLOPTTYPE_OBJECTPOINT + 22, _
		$CURLOPT_HTTPHEADER = $CURLOPTTYPE_OBJECTPOINT + 23, _
		$CURLOPT_HTTPPOST = $CURLOPTTYPE_OBJECTPOINT + 24, _
		$CURLOPT_SSLCERT = $CURLOPTTYPE_OBJECTPOINT + 25, _
		$CURLOPT_KEYPASSWD = $CURLOPTTYPE_OBJECTPOINT + 26, _
		$CURLOPT_CRLF = $CURLOPTTYPE_LONG + 27, _
		$CURLOPT_QUOTE = $CURLOPTTYPE_OBJECTPOINT + 28, _
		$CURLOPT_HEADERDATA = $CURLOPTTYPE_OBJECTPOINT + 29, _
		$CURLOPT_COOKIEFILE = $CURLOPTTYPE_OBJECTPOINT + 31, _
		$CURLOPT_SSLVERSION = $CURLOPTTYPE_LONG + 32, _
		$CURLOPT_TIMECONDITION = $CURLOPTTYPE_LONG + 33, _
		$CURLOPT_TIMEVALUE = $CURLOPTTYPE_LONG + 34, _
		$CURLOPT_CUSTOMREQUEST = $CURLOPTTYPE_OBJECTPOINT + 36, _
		$CURLOPT_STDERR = $CURLOPTTYPE_OBJECTPOINT + 37, _
		$CURLOPT_POSTQUOTE = $CURLOPTTYPE_OBJECTPOINT + 39, _
		$CURLOPT_OBSOLETE40 = $CURLOPTTYPE_OBJECTPOINT + 40, _
		$CURLOPT_VERBOSE = $CURLOPTTYPE_LONG + 41, _
		$CURLOPT_HEADER = $CURLOPTTYPE_LONG + 42, _
		$CURLOPT_NOPROGRESS = $CURLOPTTYPE_LONG + 43, _
		$CURLOPT_NOBODY = $CURLOPTTYPE_LONG + 44, _
		$CURLOPT_FAILONERROR = $CURLOPTTYPE_LONG + 45, _
		$CURLOPT_UPLOAD = $CURLOPTTYPE_LONG + 46, _
		$CURLOPT_POST = $CURLOPTTYPE_LONG + 47, _
		$CURLOPT_DIRLISTONLY = $CURLOPTTYPE_LONG + 48, _
		$CURLOPT_APPEND = $CURLOPTTYPE_LONG + 50, _
		$CURLOPT_NETRC = $CURLOPTTYPE_LONG + 51, _
		$CURLOPT_FOLLOWLOCATION = $CURLOPTTYPE_LONG + 52, _
		$CURLOPT_TRANSFERTEXT = $CURLOPTTYPE_LONG + 53, _
		$CURLOPT_PUT = $CURLOPTTYPE_LONG + 54, _
		$CURLOPT_PROGRESSFUNCTION = $CURLOPTTYPE_FUNCTIONPOINT + 56, _
		$CURLOPT_PROGRESSDATA = $CURLOPTTYPE_OBJECTPOINT + 57, _
		$CURLOPT_AUTOREFERER = $CURLOPTTYPE_LONG + 58, _
		$CURLOPT_PROXYPORT = $CURLOPTTYPE_LONG + 59, _
		$CURLOPT_POSTFIELDSIZE = $CURLOPTTYPE_LONG + 60, _
		$CURLOPT_HTTPPROXYTUNNEL = $CURLOPTTYPE_LONG + 61, _
		$CURLOPT_INTERFACE = $CURLOPTTYPE_OBJECTPOINT + 62, _
		$CURLOPT_KRBLEVEL = $CURLOPTTYPE_OBJECTPOINT + 63, _
		$CURLOPT_SSL_VERIFYPEER = $CURLOPTTYPE_LONG + 64, _
		$CURLOPT_CAINFO = $CURLOPTTYPE_OBJECTPOINT + 65, _
		$CURLOPT_MAXREDIRS = $CURLOPTTYPE_LONG + 68, _
		$CURLOPT_FILETIME = $CURLOPTTYPE_LONG + 69, _
		$CURLOPT_TELNETOPTIONS = $CURLOPTTYPE_OBJECTPOINT + 70, _
		$CURLOPT_MAXCONNECTS = $CURLOPTTYPE_LONG + 71, _
		$CURLOPT_OBSOLETE72 = $CURLOPTTYPE_LONG + 72, _
		$CURLOPT_FRESH_CONNECT = $CURLOPTTYPE_LONG + 74, _
		$CURLOPT_FORBID_REUSE = $CURLOPTTYPE_LONG + 75, _
		$CURLOPT_RANDOM_FILE = $CURLOPTTYPE_OBJECTPOINT + 76, _
		$CURLOPT_EGDSOCKET = $CURLOPTTYPE_OBJECTPOINT + 77, _
		$CURLOPT_CONNECTTIMEOUT = $CURLOPTTYPE_LONG + 78, _
		$CURLOPT_HEADERFUNCTION = $CURLOPTTYPE_FUNCTIONPOINT + 79, _
		$CURLOPT_HTTPGET = $CURLOPTTYPE_LONG + 80, _
		$CURLOPT_SSL_VERIFYHOST = $CURLOPTTYPE_LONG + 81, _
		$CURLOPT_COOKIEJAR = $CURLOPTTYPE_OBJECTPOINT + 82, _
		$CURLOPT_SSL_CIPHER_LIST = $CURLOPTTYPE_OBJECTPOINT + 83, _
		$CURLOPT_HTTP_VERSION = $CURLOPTTYPE_LONG + 84, _
		$CURLOPT_FTP_USE_EPSV = $CURLOPTTYPE_LONG + 85, _
		$CURLOPT_SSLCERTTYPE = $CURLOPTTYPE_OBJECTPOINT + 86, _
		$CURLOPT_SSLKEY = $CURLOPTTYPE_OBJECTPOINT + 87, _
		$CURLOPT_SSLKEYTYPE = $CURLOPTTYPE_OBJECTPOINT + 88, _
		$CURLOPT_SSLENGINE = $CURLOPTTYPE_OBJECTPOINT + 89, _
		$CURLOPT_SSLENGINE_DEFAULT = $CURLOPTTYPE_LONG + 90, _
		$CURLOPT_DNS_USE_GLOBAL_CACHE = $CURLOPTTYPE_LONG + 91, _
		$CURLOPT_DNS_CACHE_TIMEOUT = $CURLOPTTYPE_LONG + 92, _
		$CURLOPT_PREQUOTE = $CURLOPTTYPE_OBJECTPOINT + 93, _
		$CURLOPT_DEBUGFUNCTION = $CURLOPTTYPE_FUNCTIONPOINT + 94, _
		$CURLOPT_DEBUGDATA = $CURLOPTTYPE_OBJECTPOINT + 95, _
		$CURLOPT_COOKIESESSION = $CURLOPTTYPE_LONG + 96, _
		$CURLOPT_CAPATH = $CURLOPTTYPE_OBJECTPOINT + 97, _
		$CURLOPT_BUFFERSIZE = $CURLOPTTYPE_LONG + 98, _
		$CURLOPT_NOSIGNAL = $CURLOPTTYPE_LONG + 99, _
		$CURLOPT_SHARE = $CURLOPTTYPE_OBJECTPOINT + 100, _
		$CURLOPT_PROXYTYPE = $CURLOPTTYPE_LONG + 101, _
		$CURLOPT_ACCEPT_ENCODING = $CURLOPTTYPE_OBJECTPOINT + 102, _
		$CURLOPT_PRIVATE = $CURLOPTTYPE_OBJECTPOINT + 103, _
		$CURLOPT_HTTP200ALIASES = $CURLOPTTYPE_OBJECTPOINT + 104, _
		$CURLOPT_UNRESTRICTED_AUTH = $CURLOPTTYPE_LONG + 105, _
		$CURLOPT_FTP_USE_EPRT = $CURLOPTTYPE_LONG + 106, _
		$CURLOPT_HTTPAUTH = $CURLOPTTYPE_LONG + 107, _
		$CURLOPT_SSL_CTX_FUNCTION = $CURLOPTTYPE_FUNCTIONPOINT + 108, _
		$CURLOPT_SSL_CTX_DATA = $CURLOPTTYPE_OBJECTPOINT + 109, _
		$CURLOPT_FTP_CREATE_MISSING_DIRS = $CURLOPTTYPE_LONG + 110, _
		$CURLOPT_PROXYAUTH = $CURLOPTTYPE_LONG + 111, _
		$CURLOPT_FTP_RESPONSE_TIMEOUT = $CURLOPTTYPE_LONG + 112, _
		$CURLOPT_IPRESOLVE = $CURLOPTTYPE_LONG + 113, _
		$CURLOPT_MAXFILESIZE = $CURLOPTTYPE_LONG + 114, _
		$CURLOPT_INFILESIZE_LARGE = $CURLOPTTYPE_OFF_T + 115, _
		$CURLOPT_RESUME_FROM_LARGE = $CURLOPTTYPE_OFF_T + 116, _
		$CURLOPT_MAXFILESIZE_LARGE = $CURLOPTTYPE_OFF_T + 117, _
		$CURLOPT_NETRC_FILE = $CURLOPTTYPE_OBJECTPOINT + 118, _
		$CURLOPT_USE_SSL = $CURLOPTTYPE_LONG + 119, _
		$CURLOPT_POSTFIELDSIZE_LARGE = $CURLOPTTYPE_OFF_T + 120, _
		$CURLOPT_TCP_NODELAY = $CURLOPTTYPE_LONG + 121, _
		$CURLOPT_FTPSSLAUTH = $CURLOPTTYPE_LONG + 129, _
		$CURLOPT_IOCTLFUNCTION = $CURLOPTTYPE_FUNCTIONPOINT + 130, _
		$CURLOPT_IOCTLDATA = $CURLOPTTYPE_OBJECTPOINT + 131, _
		$CURLOPT_FTP_ACCOUNT = $CURLOPTTYPE_OBJECTPOINT + 134, _
		$CURLOPT_COOKIELIST = $CURLOPTTYPE_OBJECTPOINT + 135, _
		$CURLOPT_IGNORE_CONTENT_LENGTH = $CURLOPTTYPE_LONG + 136, _
		$CURLOPT_FTP_SKIP_PASV_IP = $CURLOPTTYPE_LONG + 137, _
		$CURLOPT_FTP_FILEMETHOD = $CURLOPTTYPE_LONG + 138, _
		$CURLOPT_LOCALPORT = $CURLOPTTYPE_LONG + 139, _
		$CURLOPT_LOCALPORTRANGE = $CURLOPTTYPE_LONG + 140, _
		$CURLOPT_CONNECT_ONLY = $CURLOPTTYPE_LONG + 141, _
		$CURLOPT_CONV_FROM_NETWORK_FUNCTION = $CURLOPTTYPE_FUNCTIONPOINT + 142, _
		$CURLOPT_CONV_TO_NETWORK_FUNCTION = $CURLOPTTYPE_FUNCTIONPOINT + 143, _
		$CURLOPT_CONV_FROM_UTF8_FUNCTION = $CURLOPTTYPE_FUNCTIONPOINT + 144, _
		$CURLOPT_MAX_SEND_SPEED_LARGE = $CURLOPTTYPE_OFF_T + 145, _
		$CURLOPT_MAX_RECV_SPEED_LARGE = $CURLOPTTYPE_OFF_T + 146, _
		$CURLOPT_FTP_ALTERNATIVE_TO_USER = $CURLOPTTYPE_OBJECTPOINT + 147, _
		$CURLOPT_SOCKOPTFUNCTION = $CURLOPTTYPE_FUNCTIONPOINT + 148, _
		$CURLOPT_SOCKOPTDATA = $CURLOPTTYPE_OBJECTPOINT + 149, _
		$CURLOPT_SSL_SESSIONID_CACHE = $CURLOPTTYPE_LONG + 150, _
		$CURLOPT_SSH_AUTH_TYPES = $CURLOPTTYPE_LONG + 151, _
		$CURLOPT_SSH_PUBLIC_KEYFILE = $CURLOPTTYPE_OBJECTPOINT + 152, _
		$CURLOPT_SSH_PRIVATE_KEYFILE = $CURLOPTTYPE_OBJECTPOINT + 153, _
		$CURLOPT_FTP_SSL_CCC = $CURLOPTTYPE_LONG + 154, _
		$CURLOPT_TIMEOUT_MS = $CURLOPTTYPE_LONG + 155, _
		$CURLOPT_CONNECTTIMEOUT_MS = $CURLOPTTYPE_LONG + 156, _
		$CURLOPT_HTTP_TRANSFER_DECODING = $CURLOPTTYPE_LONG + 157, _
		$CURLOPT_HTTP_CONTENT_DECODING = $CURLOPTTYPE_LONG + 158, _
		$CURLOPT_NEW_FILE_PERMS = $CURLOPTTYPE_LONG + 159, _
		$CURLOPT_NEW_DIRECTORY_PERMS = $CURLOPTTYPE_LONG + 160, _
		$CURLOPT_POSTREDIR = $CURLOPTTYPE_LONG + 161, _
		$CURLOPT_SSH_HOST_PUBLIC_KEY_MD5 = $CURLOPTTYPE_OBJECTPOINT + 162, _
		$CURLOPT_OPENSOCKETFUNCTION = $CURLOPTTYPE_FUNCTIONPOINT + 163, _
		$CURLOPT_OPENSOCKETDATA = $CURLOPTTYPE_OBJECTPOINT + 164, _
		$CURLOPT_COPYPOSTFIELDS = $CURLOPTTYPE_OBJECTPOINT + 165, _
		$CURLOPT_PROXY_TRANSFER_MODE = $CURLOPTTYPE_LONG + 166, _
		$CURLOPT_SEEKFUNCTION = $CURLOPTTYPE_FUNCTIONPOINT + 167, _
		$CURLOPT_SEEKDATA = $CURLOPTTYPE_OBJECTPOINT + 168, _
		$CURLOPT_CRLFILE = $CURLOPTTYPE_OBJECTPOINT + 169, _
		$CURLOPT_ISSUERCERT = $CURLOPTTYPE_OBJECTPOINT + 170, _
		$CURLOPT_ADDRESS_SCOPE = $CURLOPTTYPE_LONG + 171, _
		$CURLOPT_CERTINFO = $CURLOPTTYPE_LONG + 172, _
		$CURLOPT_USERNAME = $CURLOPTTYPE_OBJECTPOINT + 173, _
		$CURLOPT_PASSWORD = $CURLOPTTYPE_OBJECTPOINT + 174, _
		$CURLOPT_PROXYUSERNAME = $CURLOPTTYPE_OBJECTPOINT + 175, _
		$CURLOPT_PROXYPASSWORD = $CURLOPTTYPE_OBJECTPOINT + 176, _
		$CURLOPT_NOPROXY = $CURLOPTTYPE_OBJECTPOINT + 177, _
		$CURLOPT_TFTP_BLKSIZE = $CURLOPTTYPE_LONG + 178, _
		$CURLOPT_SOCKS5_GSSAPI_SERVICE = $CURLOPTTYPE_OBJECTPOINT + 179, _
		$CURLOPT_SOCKS5_GSSAPI_NEC = $CURLOPTTYPE_LONG + 180, _
		$CURLOPT_PROTOCOLS = $CURLOPTTYPE_LONG + 181, _
		$CURLOPT_REDIR_PROTOCOLS = $CURLOPTTYPE_LONG + 182, _
		$CURLOPT_SSH_KNOWNHOSTS = $CURLOPTTYPE_OBJECTPOINT + 183, _
		$CURLOPT_SSH_KEYFUNCTION = $CURLOPTTYPE_FUNCTIONPOINT + 184, _
		$CURLOPT_SSH_KEYDATA = $CURLOPTTYPE_OBJECTPOINT + 185, _
		$CURLOPT_MAIL_FROM = $CURLOPTTYPE_OBJECTPOINT + 186, _
		$CURLOPT_MAIL_RCPT = $CURLOPTTYPE_OBJECTPOINT + 187, _
		$CURLOPT_FTP_USE_PRET = $CURLOPTTYPE_LONG + 188, _
		$CURLOPT_RTSP_REQUEST = $CURLOPTTYPE_LONG + 189, _
		$CURLOPT_RTSP_SESSION_ID = $CURLOPTTYPE_OBJECTPOINT + 190, _
		$CURLOPT_RTSP_STREAM_URI = $CURLOPTTYPE_OBJECTPOINT + 191, _
		$CURLOPT_RTSP_TRANSPORT = $CURLOPTTYPE_OBJECTPOINT + 192, _
		$CURLOPT_RTSP_CLIENT_CSEQ = $CURLOPTTYPE_LONG + 193, _
		$CURLOPT_RTSP_SERVER_CSEQ = $CURLOPTTYPE_LONG + 194, _
		$CURLOPT_INTERLEAVEDATA = $CURLOPTTYPE_OBJECTPOINT + 195, _
		$CURLOPT_INTERLEAVEFUNCTION = $CURLOPTTYPE_FUNCTIONPOINT + 196, _
		$CURLOPT_WILDCARDMATCH = $CURLOPTTYPE_LONG + 197, _
		$CURLOPT_CHUNK_BGN_FUNCTION = $CURLOPTTYPE_FUNCTIONPOINT + 198, _
		$CURLOPT_CHUNK_END_FUNCTION = $CURLOPTTYPE_FUNCTIONPOINT + 199, _
		$CURLOPT_FNMATCH_FUNCTION = $CURLOPTTYPE_FUNCTIONPOINT + 200, _
		$CURLOPT_CHUNK_DATA = $CURLOPTTYPE_OBJECTPOINT + 201, _
		$CURLOPT_FNMATCH_DATA = $CURLOPTTYPE_OBJECTPOINT + 202, _
		$CURLOPT_RESOLVE = $CURLOPTTYPE_OBJECTPOINT + 203, _
		$CURLOPT_TLSAUTH_USERNAME = $CURLOPTTYPE_OBJECTPOINT + 204, _
		$CURLOPT_TLSAUTH_PASSWORD = $CURLOPTTYPE_OBJECTPOINT + 205, _
		$CURLOPT_TLSAUTH_TYPE = $CURLOPTTYPE_OBJECTPOINT + 206, _
		$CURLOPT_TRANSFER_ENCODING = $CURLOPTTYPE_LONG + 207, _
		$CURLOPT_CLOSESOCKETFUNCTION = $CURLOPTTYPE_FUNCTIONPOINT + 208, _
		$CURLOPT_CLOSESOCKETDATA = $CURLOPTTYPE_OBJECTPOINT + 209, _
		$CURLOPT_GSSAPI_DELEGATION = $CURLOPTTYPE_LONG + 210, _
		$CURLOPT_DNS_SERVERS = $CURLOPTTYPE_OBJECTPOINT + 211, _
		$CURLOPT_ACCEPTTIMEOUT_MS = $CURLOPTTYPE_LONG + 212, _
		$CURLOPT_TCP_KEEPALIVE = $CURLOPTTYPE_LONG + 213, _
		$CURLOPT_TCP_KEEPIDLE = $CURLOPTTYPE_LONG + 214, _
		$CURLOPT_TCP_KEEPINTVL = $CURLOPTTYPE_LONG + 215, _
		$CURLOPT_SSL_OPTIONS = $CURLOPTTYPE_LONG + 216, _
		$CURLOPT_MAIL_AUTH = $CURLOPTTYPE_OBJECTPOINT + 217, _
		$CURLOPT_SASL_IR = $CURLOPTTYPE_LONG + 218, _
		$CURLOPT_XFERINFOFUNCTION = $CURLOPTTYPE_FUNCTIONPOINT + 219, _
		$CURLOPT_XOAUTH2_BEARER = $CURLOPTTYPE_OBJECTPOINT + 220, _
		$CURLOPT_DNS_INTERFACE = $CURLOPTTYPE_OBJECTPOINT + 221, _
		$CURLOPT_DNS_LOCAL_IP4 = $CURLOPTTYPE_OBJECTPOINT + 222, _
		$CURLOPT_DNS_LOCAL_IP6 = $CURLOPTTYPE_OBJECTPOINT + 223, _
		$CURLOPT_LOGIN_OPTIONS = $CURLOPTTYPE_OBJECTPOINT + 224, _
		$CURLOPT_SSL_ENABLE_NPN = $CURLOPTTYPE_LONG + 225, _
		$CURLOPT_SSL_ENABLE_ALPN = $CURLOPTTYPE_LONG + 226, _
		$CURLOPT_EXPECT_100_TIMEOUT_MS = $CURLOPTTYPE_LONG + 227, _
		$CURLOPT_PROXYHEADER = $CURLOPTTYPE_OBJECTPOINT + 228, _
		$CURLOPT_HEADEROPT = $CURLOPTTYPE_LONG + 229, _
		$CURLOPT_PINNEDPUBLICKEY = $CURLOPTTYPE_OBJECTPOINT + 230, _
		$CURLOPT_UNIX_SOCKET_PATH = $CURLOPTTYPE_OBJECTPOINT + 231, _
		$CURLOPT_SSL_VERIFYSTATUS = $CURLOPTTYPE_LONG + 232, _
		$CURLOPT_SSL_FALSESTART = $CURLOPTTYPE_LONG + 233, _
		$CURLOPT_PATH_AS_IS = $CURLOPTTYPE_LONG + 234, _
		$CURLOPT_PROXY_SERVICE_NAME = $CURLOPTTYPE_STRINGPOINT + 235, _
		$CURLOPT_SERVICE_NAME = $CURLOPTTYPE_STRINGPOINT + 236, _
		$CURLOPT_PIPEWAIT = $CURLOPTTYPE_LONG + 237, _   ;  /* Wait/don't wait for pipe/mutex to clarify */
		$CURLOPT_DEFAULT_PROTOCOL = $CURLOPTTYPE_STRINGPOINT + 238, _    ; /* Set the protocol used when curl is given a URL without a protocol */
		$CURLOPT_STREAM_WEIGHT = $CURLOPTTYPE_LONG + 239, _
		$CURLOPT_STREAM_DEPENDS = $CURLOPTTYPE_OBJECTPOINT + 240, _
		$CURLOPT_STREAM_DEPENDS_E = $CURLOPTTYPE_OBJECTPOINT + 241, _
		$CURLOPT_TFTP_NO_OPTIONS = $CURLOPTTYPE_LONG + 242, _
		$CURLOPT_CONNECT_TO = $CURLOPTTYPE_SLISTPOINT + 243, _
		$CURLOPT_TCP_FASTOPEN = $CURLOPTTYPE_LONG + 244, _
		$CURLOPT_KEEP_SENDING_ON_ERROR = $CURLOPTTYPE_LONG + 245, _
		$CURLOPT_PROXY_CAINFO = $CURLOPTTYPE_STRINGPOINT + 246, _
		$CURLOPT_PROXY_CAPATH = $CURLOPTTYPE_STRINGPOINT + 247, _
		$CURLOPT_PROXY_SSL_VERIFYPEER = $CURLOPTTYPE_LONG + 248, _
		$CURLOPT_PROXY_SSL_VERIFYHOST = $CURLOPTTYPE_LONG + 249, _
		$CURLOPT_PROXY_SSLVERSION = $CURLOPTTYPE_VALUES + 250, _
		$CURLOPT_PROXY_TLSAUTH_USERNAME = $CURLOPTTYPE_STRINGPOINT + 251, _
		$CURLOPT_PROXY_TLSAUTH_PASSWORD = $CURLOPTTYPE_STRINGPOINT + 252, _
		$CURLOPT_PROXY_TLSAUTH_TYPE = $CURLOPTTYPE_STRINGPOINT + 253, _
		$CURLOPT_PROXY_SSLCERT = $CURLOPTTYPE_STRINGPOINT + 254, _
		$CURLOPT_PROXY_SSLCERTTYPE = $CURLOPTTYPE_STRINGPOINT + 255, _
		$CURLOPT_PROXY_SSLKEY = $CURLOPTTYPE_STRINGPOINT + 256, _
		$CURLOPT_PROXY_SSLKEYTYPE = $CURLOPTTYPE_STRINGPOINT + 257, _
		$CURLOPT_PROXY_KEYPASSWD = $CURLOPTTYPE_STRINGPOINT + 258, _
		$CURLOPT_PROXY_SSL_CIPHER_LIST = $CURLOPTTYPE_STRINGPOINT + 259, _
		$CURLOPT_PROXY_CRLFILE = $CURLOPTTYPE_STRINGPOINT + 260, _
		$CURLOPT_PROXY_SSL_OPTIONS = $CURLOPTTYPE_LONG + 261, _
		$CURLOPT_PRE_PROXY = $CURLOPTTYPE_STRINGPOINT + 262, _
		$CURLOPT_PROXY_PINNEDPUBLICKEY = $CURLOPTTYPE_STRINGPOINT + 263, _
		$CURLOPT_ABSTRACT_UNIX_SOCKET = $CURLOPTTYPE_STRINGPOINT + 264, _
		$CURLOPT_SUPPRESS_CONNECT_HEADERS = $CURLOPTTYPE_LONG + 265, _
		$CURLOPT_REQUEST_TARGET = $CURLOPTTYPE_STRINGPOINT + 266, _
		$CURLOPT_SOCKS5_AUTH = $CURLOPTTYPE_LONG + 267, _
		$CURLOPT_SSH_COMPRESSION = $CURLOPTTYPE_LONG + 268, _
		$CURLOPT_MIMEPOST = $CURLOPTTYPE_OBJECTPOINT + 269, _
		$CURLOPT_TIMEVALUE_LARGE = $CURLOPTTYPE_OFF_T + 270, _
		$CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS = $CURLOPTTYPE_LONG + 271, _
		$CURLOPT_RESOLVER_START_FUNCTION = $CURLOPTTYPE_FUNCTIONPOINT + 272, _
		$CURLOPT_RESOLVER_START_DATA = $CURLOPTTYPE_CBPOINT + 273, _
		$CURLOPT_HAPROXYPROTOCOL = $CURLOPTTYPE_LONG + 274, _
		$CURLOPT_DNS_SHUFFLE_ADDRESSES = $CURLOPTTYPE_LONG + 275, _
		$CURLOPT_TLS13_CIPHERS = $CURLOPTTYPE_STRINGPOINT + 276, _
		$CURLOPT_PROXY_TLS13_CIPHERS = $CURLOPTTYPE_STRINGPOINT + 277, _
		$CURLOPT_DISALLOW_USERNAME_IN_URL = $CURLOPTTYPE_LONG + 278, _
		$CURLOPT_DOH_URL = $CURLOPTTYPE_STRINGPOINT + 279, _
		$CURLOPT_UPLOAD_BUFFERSIZE = $CURLOPTTYPE_LONG + 280, _
		$CURLOPT_UPKEEP_INTERVAL_MS = $CURLOPTTYPE_LONG + 281, _
		$CURLOPT_CURLU = $CURLOPTTYPE_OBJECTPOINT + 282, _
		$CURLOPT_TRAILERFUNCTION = $CURLOPTTYPE_FUNCTIONPOINT + 283, _
		$CURLOPT_TRAILERDATA = $CURLOPTTYPE_CBPOINT + 284, _
		$CURLOPT_HTTP09_ALLOWED = $CURLOPTTYPE_LONG + 285, _
		$CURLOPT_ALTSVC_CTRL = $CURLOPTTYPE_LONG + 286, _
		$CURLOPT_ALTSVC = $CURLOPTTYPE_STRINGPOINT + 287, _
		$CURLOPT_MAXAGE_CONN = $CURLOPTTYPE_LONG + 288, _
		$CURLOPT_SASL_AUTHZID = $CURLOPTTYPE_STRINGPOINT + 289, _
		$CURLOPT_MAIL_RCPT_ALLLOWFAILS = $CURLOPTTYPE_LONG + 290, _
		$CURLOPT_SSLCERT_BLOB = $CURLOPTTYPE_BLOB + 291, _
		$CURLOPT_SSLKEY_BLOB = $CURLOPTTYPE_BLOB + 292, _
		$CURLOPT_PROXY_SSLCERT_BLOB = $CURLOPTTYPE_BLOB + 293, _
		$CURLOPT_PROXY_SSLKEY_BLOB = $CURLOPTTYPE_BLOB + 294, _
		$CURLOPT_ISSUERCERT_BLOB = $CURLOPTTYPE_BLOB + 295, _
		$CURLOPT_PROXY_ISSUERCERT = $CURLOPTTYPE_STRINGPOINT + 296, _
		$CURLOPT_PROXY_ISSUERCERT_BLOB = $CURLOPTTYPE_BLOB + 297, _
		$CURLOPT_SSL_EC_CURVES = $CURLOPTTYPE_STRINGPOINT + 298, _
		$CURLOPT_HSTS_CTRL = $CURLOPTTYPE_LONG + 299, _
		$CURLOPT_HSTS = $CURLOPTTYPE_STRINGPOINT + 300, _
		$CURLOPT_HSTSREADFUNCTION = $CURLOPTTYPE_FUNCTIONPOINT + 301, _
		$CURLOPT_HSTSREADDATA = $CURLOPTTYPE_CBPOINT + 302, _
		$CURLOPT_HSTSWRITEFUNCTION = $CURLOPTTYPE_FUNCTIONPOINT + 303, _
		$CURLOPT_HSTSWRITEDATA = $CURLOPTTYPE_CBPOINT + 304, _
		$CURLOPT_AWS_SIGV4 = $CURLOPTTYPE_STRINGPOINT + 305, _
		$CURLOPT_DOH_SSL_VERIFYPEER = $CURLOPTTYPE_LONG + 306, _
		$CURLOPT_DOH_SSL_VERIFYHOST = $CURLOPTTYPE_LONG + 307, _
		$CURLOPT_DOH_SSL_VERIFYSTATUS = $CURLOPTTYPE_LONG + 308, _
		$CURLOPT_CAINFO_BLOB = $CURLOPTTYPE_BLOB + 309, _
		$CURLOPT_PROXY_CAINFO_BLOB = $CURLOPTTYPE_BLOB + 310, _
		$CURLOPT_SSH_HOST_PUBLIC_KEY_SHA256 = $CURLOPTTYPE_STRINGPOINT + 311, _
		$CURLOPT_PREREQFUNCTION = $CURLOPTTYPE_FUNCTIONPOINT + 312, _
		$CURLOPT_PREREQDATA = $CURLOPTTYPE_CBPOINT + 313, _
		$CURLOPT_MAXLIFETIME_CONN = $CURLOPTTYPE_LONG + 314, _
		$CURLOPT_MIME_OPTIONS = $CURLOPTTYPE_LONG + 315, _
		$CURLOPT_LASTENTRY


Global Const $CURLOPT_XFERINFODATA = $CURLOPT_PROGRESSDATA
Global Const $CURLOPT_SERVER_RESPONSE_TIMEOUT = $CURLOPT_FTP_RESPONSE_TIMEOUT
Global Const $CURLOPT_POST301 = $CURLOPT_POSTREDIR
Global Const $CURLOPT_SSLKEYPASSWD = $CURLOPT_KEYPASSWD
Global Const $CURLOPT_FTPAPPEND = $CURLOPT_APPEND
Global Const $CURLOPT_FTPLISTONLY = $CURLOPT_DIRLISTONLY
Global Const $CURLOPT_FTP_SSL = $CURLOPT_USE_SSL
Global Const $CURLOPT_SSLCERTPASSWD = $CURLOPT_KEYPASSWD
Global Const $CURLOPT_KRB4LEVEL = $CURLOPT_KRBLEVEL
Global Const $CURLOPT_RTSPHEADER = $CURLOPT_HTTPHEADER

Global Const $CURL_IPRESOLVE_WHATEVER = 0
Global Const $CURL_IPRESOLVE_V4 = 1
Global Const $CURL_IPRESOLVE_V6 = 2

Global Enum _
		$CURL_HTTP_VERSION_NONE, _
		$CURL_HTTP_VERSION_1_0, _
		$CURL_HTTP_VERSION_1_1, _
		$CURL_HTTP_VERSION_2_0, _
		$CURL_HTTP_VERSION_LAST

Global Enum _
		$CURL_RTSPREQ_NONE, _
		$CURL_RTSPREQ_OPTIONS, _
		$CURL_RTSPREQ_DESCRIBE, _
		$CURL_RTSPREQ_ANNOUNCE, _
		$CURL_RTSPREQ_SETUP, _
		$CURL_RTSPREQ_PLAY, _
		$CURL_RTSPREQ_PAUSE, _
		$CURL_RTSPREQ_TEARDOWN, _
		$CURL_RTSPREQ_GET_PARAMETER, _
		$CURL_RTSPREQ_SET_PARAMETER, _
		$CURL_RTSPREQ_RECORD, _
		$CURL_RTSPREQ_RECEIVE, _
		$CURL_RTSPREQ_LAST

Global Enum _
		$CURL_NETRC_IGNORED, _
		$CURL_NETRC_OPTIONAL, _
		$CURL_NETRC_REQUIRED, _
		$CURL_NETRC_LAST

Global Enum _
		$CURL_SSLVERSION_DEFAULT, _
		$CURL_SSLVERSION_TLSv1, _
		$CURL_SSLVERSION_SSLv2, _
		$CURL_SSLVERSION_SSLv3, _
		$CURL_SSLVERSION_TLSv1_0, _
		$CURL_SSLVERSION_TLSv1_1, _
		$CURL_SSLVERSION_TLSv1_2, _
		$CURL_SSLVERSION_TLSv1_3, _
		$CURL_SSLVERSION_LAST

Global Enum _
		$CURL_TLSAUTH_NONE, _
		$CURL_TLSAUTH_SRP, _
		$CURL_TLSAUTH_LAST

Global Const $CURL_REDIR_GET_ALL = 0
Global Const $CURL_REDIR_POST_301 = 1
Global Const $CURL_REDIR_POST_302 = 2
Global Const $CURL_REDIR_POST_303 = 4
Global Const $CURL_REDIR_POST_ALL = BitOR($CURL_REDIR_POST_301, $CURL_REDIR_POST_302, $CURL_REDIR_POST_303)

Global Enum _
		$CURL_TIMECOND_NONE, _
		$CURL_TIMECOND_IFMODSINCE, _
		$CURL_TIMECOND_IFUNMODSINCE, _
		$CURL_TIMECOND_LASTMOD, _
		$CURL_TIMECOND_LAST

Global Enum _
		$CURLFORM_NOTHING, _
		$CURLFORM_COPYNAME, _
		$CURLFORM_PTRNAME, _
		$CURLFORM_NAMELENGTH, _
		$CURLFORM_COPYCONTENTS, _
		$CURLFORM_PTRCONTENTS, _
		$CURLFORM_CONTENTSLENGTH, _
		$CURLFORM_FILECONTENT, _
		$CURLFORM_ARRAY, _
		$CURLFORM_OBSOLETE, _
		$CURLFORM_FILE, _
		$CURLFORM_BUFFER, _
		$CURLFORM_BUFFERPTR, _
		$CURLFORM_BUFFERLENGTH, _
		$CURLFORM_CONTENTTYPE, _
		$CURLFORM_CONTENTHEADER, _
		$CURLFORM_FILENAME, _
		$CURLFORM_END, _
		$CURLFORM_OBSOLETE2, _
		$CURLFORM_STREAM, _
		$CURLFORM_LASTENTRY

Global Enum _
		$CURL_FORMADD_OK, _
		$CURL_FORMADD_MEMORY, _
		$CURL_FORMADD_OPTION_TWICE, _
		$CURL_FORMADD_NULL, _
		$CURL_FORMADD_UNKNOWN_OPTION, _
		$CURL_FORMADD_INCOMPLETE, _
		$CURL_FORMADD_ILLEGAL_ARRAY, _
		$CURL_FORMADD_DISABLED, _
		$CURL_FORMADD_LAST

Global Enum _
		$CURLSSLBACKEND_NONE, _
		$CURLSSLBACKEND_OPENSSL, _
		$CURLSSLBACKEND_GNUTLS, _
		$CURLSSLBACKEND_NSS, _
		$CURLSSLBACKEND_OBSOLETE4, _
		$CURLSSLBACKEND_GSKIT, _
		$CURLSSLBACKEND_POLARSSL, _
		$CURLSSLBACKEND_CYASSL, _
		$CURLSSLBACKEND_SCHANNEL, _
		$CURLSSLBACKEND_DARWINSSL, _
		$CURLSSLBACKEND_AXTLS

Global Const $CURLINFO_STRING = 0x100000
Global Const $CURLINFO_LONG = 0x200000
Global Const $CURLINFO_DOUBLE = 0x300000
Global Const $CURLINFO_SLIST = 0x400000
Global Const $CURLINFO_MASK = 0x0fffff
Global Const $CURLINFO_TYPEMASK = 0xf00000

Global Const $CURLINFO_PTR = 0x400000
Global Const $CURLINFO_SOCKET = 0x500000
Global Const $CURLINFO_OFF_T = 0x600000


Global Enum _
		$CURLINFO_NONE, _
		$CURLINFO_EFFECTIVE_URL = $CURLINFO_STRING + 1, _
		$CURLINFO_RESPONSE_CODE = $CURLINFO_LONG + 2, _
		$CURLINFO_TOTAL_TIME = $CURLINFO_DOUBLE + 3, _
		$CURLINFO_NAMELOOKUP_TIME = $CURLINFO_DOUBLE + 4, _
		$CURLINFO_CONNECT_TIME = $CURLINFO_DOUBLE + 5, _
		$CURLINFO_PRETRANSFER_TIME = $CURLINFO_DOUBLE + 6, _
		$CURLINFO_SIZE_UPLOAD = $CURLINFO_DOUBLE + 7, _
		$CURLINFO_SIZE_DOWNLOAD = $CURLINFO_DOUBLE + 8, _
		$CURLINFO_SPEED_DOWNLOAD = $CURLINFO_DOUBLE + 9, _
		$CURLINFO_SPEED_UPLOAD = $CURLINFO_DOUBLE + 10, _
		$CURLINFO_HEADER_SIZE = $CURLINFO_LONG + 11, _
		$CURLINFO_REQUEST_SIZE = $CURLINFO_LONG + 12, _
		$CURLINFO_SSL_VERIFYRESULT = $CURLINFO_LONG + 13, _
		$CURLINFO_FILETIME = $CURLINFO_LONG + 14, _
		$CURLINFO_CONTENT_LENGTH_DOWNLOAD = $CURLINFO_DOUBLE + 15, _
		$CURLINFO_CONTENT_LENGTH_UPLOAD = $CURLINFO_DOUBLE + 16, _
		$CURLINFO_STARTTRANSFER_TIME = $CURLINFO_DOUBLE + 17, _
		$CURLINFO_CONTENT_TYPE = $CURLINFO_STRING + 18, _
		$CURLINFO_REDIRECT_TIME = $CURLINFO_DOUBLE + 19, _
		$CURLINFO_REDIRECT_COUNT = $CURLINFO_LONG + 20, _
		$CURLINFO_PRIVATE = $CURLINFO_STRING + 21, _
		$CURLINFO_HTTP_CONNECTCODE = $CURLINFO_LONG + 22, _
		$CURLINFO_HTTPAUTH_AVAIL = $CURLINFO_LONG + 23, _
		$CURLINFO_PROXYAUTH_AVAIL = $CURLINFO_LONG + 24, _
		$CURLINFO_OS_ERRNO = $CURLINFO_LONG + 25, _
		$CURLINFO_NUM_CONNECTS = $CURLINFO_LONG + 26, _
		$CURLINFO_SSL_ENGINES = $CURLINFO_SLIST + 27, _
		$CURLINFO_COOKIELIST = $CURLINFO_SLIST + 28, _
		$CURLINFO_LASTSOCKET = $CURLINFO_LONG + 29, _
		$CURLINFO_FTP_ENTRY_PATH = $CURLINFO_STRING + 30, _
		$CURLINFO_REDIRECT_URL = $CURLINFO_STRING + 31, _
		$CURLINFO_PRIMARY_IP = $CURLINFO_STRING + 32, _
		$CURLINFO_APPCONNECT_TIME = $CURLINFO_DOUBLE + 33, _
		$CURLINFO_CERTINFO = $CURLINFO_SLIST + 34, _
		$CURLINFO_CONDITION_UNMET = $CURLINFO_LONG + 35, _
		$CURLINFO_RTSP_SESSION_ID = $CURLINFO_STRING + 36, _
		$CURLINFO_RTSP_CLIENT_CSEQ = $CURLINFO_LONG + 37, _
		$CURLINFO_RTSP_SERVER_CSEQ = $CURLINFO_LONG + 38, _
		$CURLINFO_RTSP_CSEQ_RECV = $CURLINFO_LONG + 39, _
		$CURLINFO_PRIMARY_PORT = $CURLINFO_LONG + 40, _
		$CURLINFO_LOCAL_IP = $CURLINFO_STRING + 41, _
		$CURLINFO_LOCAL_PORT = $CURLINFO_LONG + 42, _
		$CURLINFO_TLS_SESSION = $CURLINFO_SLIST + 43, _
		$CURLINFO_ACTIVESOCKET = $CURLINFO_SOCKET + 44, _
		$CURLINFO_TLS_SSL_PTR = $CURLINFO_PTR + 45, _
		$CURLINFO_HTTP_VERSION = $CURLINFO_LONG + 46, _
		$CURLINFO_PROXY_SSL_VERIFYRESULT = $CURLINFO_LONG + 47, _
		$CURLINFO_PROTOCOL = $CURLINFO_LONG + 48, _
		$CURLINFO_SCHEME = $CURLINFO_STRING + 49, _
		$CURLINFO_TOTAL_TIME_T = $CURLINFO_OFF_T + 50, _
		$CURLINFO_NAMELOOKUP_TIME_T = $CURLINFO_OFF_T + 51, _
		$CURLINFO_CONNECT_TIME_T = $CURLINFO_OFF_T + 52, _
		$CURLINFO_PRETRANSFER_TIME_T = $CURLINFO_OFF_T + 53, _
		$CURLINFO_STARTTRANSFER_TIME_T = $CURLINFO_OFF_T + 54, _
		$CURLINFO_REDIRECT_TIME_T = $CURLINFO_OFF_T + 55, _
		$CURLINFO_APPCONNECT_TIME_T = $CURLINFO_OFF_T + 56, _
		$CURLINFO_RETRY_AFTER = $CURLINFO_OFF_T + 57, _
		$CURLINFO_EFFECTIVE_METHOD = $CURLINFO_STRING + 58, _
		$CURLINFO_PROXY_ERROR = $CURLINFO_LONG + 59, _
		$CURLINFO_REFERER = $CURLINFO_STRING + 60, _
		$CURLINFO_LASTONE = 60

Global Const $CURLINFO_HTTP_CODE = $CURLINFO_RESPONSE_CODE

Global Enum _
		$CURLCLOSEPOLICY_NONE, _
		$CURLCLOSEPOLICY_OLDEST, _
		$CURLCLOSEPOLICY_LEAST_RECENTLY_USED, _
		$CURLCLOSEPOLICY_LEAST_TRAFFIC, _
		$CURLCLOSEPOLICY_SLOWEST, _
		$CURLCLOSEPOLICY_CALLBACK, _
		$CURLCLOSEPOLICY_LAST

Global Const $CURL_GLOBAL_SSL = BitShift(1, -0)
Global Const $CURL_GLOBAL_WIN32 = BitShift(1, -1)
Global Const $CURL_GLOBAL_ALL = BitOR($CURL_GLOBAL_SSL, $CURL_GLOBAL_WIN32)
Global Const $CURL_GLOBAL_NOTHING = 0
Global Const $CURL_GLOBAL_DEFAULT = $CURL_GLOBAL_ALL
Global Const $CURL_GLOBAL_ACK_EINTR = BitShift(1, -2)

Global Enum _
		$CURL_LOCK_DATA_NONE, _
		$CURL_LOCK_DATA_SHARE, _
		$CURL_LOCK_DATA_COOKIE, _
		$CURL_LOCK_DATA_DNS, _
		$CURL_LOCK_DATA_SSL_SESSION, _
		$CURL_LOCK_DATA_CONNECT, _
		$CURL_LOCK_DATA_LAST

Global Enum _
		$CURL_LOCK_ACCESS_NONE, _
		$CURL_LOCK_ACCESS_SHARED, _
		$CURL_LOCK_ACCESS_SINGLE, _
		$CURL_LOCK_ACCESS_LAST

Global Enum _
		$CURLSHE_OK, _
		$CURLSHE_BAD_OPTION, _
		$CURLSHE_IN_USE, _
		$CURLSHE_INVALID, _
		$CURLSHE_NOMEM, _
		$CURLSHE_NOT_BUILT_IN, _
		$CURLSHE_LAST

Global Enum _
		$CURLSHOPT_NONE, _
		$CURLSHOPT_SHARE, _
		$CURLSHOPT_UNSHARE, _
		$CURLSHOPT_LOCKFUNC, _
		$CURLSHOPT_UNLOCKFUNC, _
		$CURLSHOPT_USERDATA, _
		$CURLSHOPT_LAST

Global Enum _
		$CURLVERSION_FIRST, _
		$CURLVERSION_SECOND, _
		$CURLVERSION_THIRD, _
		$CURLVERSION_FOURTH, _
		$CURLVERSION_FIFTH, _
		$CURLVERSION_SIXTH, _
		$CURLVERSION_SEVENTH, _
		$CURLVERSION_EIGHTH, _
		$CURLVERSION_NINTH, _
		$CURLVERSION_TENTH, _
		$CURLVERSION_LAST

Global Const $CURLVERSION_NOW = $CURLVERSION_TENTH

Global Const $CURL_VERSION_IPV6 = BitShift(1, -0)
Global Const $CURL_VERSION_KERBEROS4 = BitShift(1, -1)
Global Const $CURL_VERSION_SSL = BitShift(1, -2)
Global Const $CURL_VERSION_LIBZ = BitShift(1, -3)
Global Const $CURL_VERSION_NTLM = BitShift(1, -4)
Global Const $CURL_VERSION_GSSNEGOTIATE = BitShift(1, -5)
Global Const $CURL_VERSION_DEBUG = BitShift(1, -6)
Global Const $CURL_VERSION_ASYNCHDNS = BitShift(1, -7)
Global Const $CURL_VERSION_SPNEGO = BitShift(1, -8)
Global Const $CURL_VERSION_LARGEFILE = BitShift(1, -9)
Global Const $CURL_VERSION_IDN = BitShift(1, -10)
Global Const $CURL_VERSION_SSPI = BitShift(1, -11)
Global Const $CURL_VERSION_CONV = BitShift(1, -12)
Global Const $CURL_VERSION_CURLDEBUG = BitShift(1, -13)
Global Const $CURL_VERSION_TLSAUTH_SRP = BitShift(1, -14)
Global Const $CURL_VERSION_NTLM_WB = BitShift(1, -15)
Global Const $CURL_VERSION_HTTP2 = BitShift(1, -16)
Global Const $CURL_VERSION_GSSAPI = BitShift(1, -17)
Global Const $CURL_VERSION_KERBEROS5 = BitShift(1, -18)
Global Const $CURL_VERSION_UNIX_SOCKETS = BitShift(1, -19)

Global Const $CURL_VERSION_PSL = BitShift(1, -20)         ; Mozilla's Public Suffix List, used for cookie domain verification */
Global Const $CURL_VERSION_HTTPS_PROXY = BitShift(1, -21) ; HTTPS-proxy support built-in */
Global Const $CURL_VERSION_MULTI_SSL = BitShift(1, -22)   ; Multiple SSL backends available */
Global Const $CURL_VERSION_BROTLI = BitShift(1, -23)      ; Brotli features are present. */
Global Const $CURL_VERSION_ALTSVC = BitShift(1, -24)      ; Alt-Svc handling built-in */
Global Const $CURL_VERSION_HTTP3 = BitShift(1, -25)       ; HTTP3 support built-in */
Global Const $CURL_VERSION_ZSTD = BitShift(1, -26)        ; zstd features are present */
Global Const $CURL_VERSION_UNICODE = BitShift(1, -27)     ; Unicode support on Windows */
Global Const $CURL_VERSION_HSTS = BitShift(1, -28)        ; HSTS is supported */
Global Const $CURL_VERSION_GSASL = BitShift(1, -29)       ; libgsasl is supported */

Global Const $CURLPAUSE_RECV = 1
Global Const $CURLPAUSE_RECV_CONT = 0
Global Const $CURLPAUSE_SEND = BitShift(1, -2)
Global Const $CURLPAUSE_SEND_CONT = 0
Global Const $CURLPAUSE_ALL = BitOR($CURLPAUSE_RECV, $CURLPAUSE_SEND)
Global Const $CURLPAUSE_CONT = BitOR($CURLPAUSE_RECV_CONT, $CURLPAUSE_SEND_CONT)

Global Enum _
		$CURLM_CALL_MULTI_PERFORM = -1, _
		$CURLM_OK, _
		$CURLM_BAD_HANDLE, _
		$CURLM_BAD_EASY_HANDLE, _
		$CURLM_OUT_OF_MEMORY, _
		$CURLM_INTERNAL_ERROR, _
		$CURLM_BAD_SOCKET, _
		$CURLM_UNKNOWN_OPTION, _
		$CURLM_ADDED_ALREADY, _
		$CURLM_LAST

Global Const $CURLM_CALL_MULTI_SOCKET = $CURLM_CALL_MULTI_PERFORM

Global Enum _
		$CURLMSG_NONE, _
		$CURLMSG_DONE, _
		$CURLMSG_LAST

Global Const $CURL_WAIT_POLLIN = 0x0001
Global Const $CURL_WAIT_POLLPRI = 0x0002
Global Const $CURL_WAIT_POLLOUT = 0x0004

Global Const $CURL_POLL_NONE = 0
Global Const $CURL_POLL_IN = 1
Global Const $CURL_POLL_OUT = 2
Global Const $CURL_POLL_INOUT = 3
Global Const $CURL_POLL_REMOVE = 4

Global Const $CURL_SOCKET_TIMEOUT = $CURL_SOCKET_BAD

Global Const $CURL_CSELECT_IN = 0x01
Global Const $CURL_CSELECT_OUT = 0x02
Global Const $CURL_CSELECT_ERR = 0x04

Global Enum _
		$CURLMOPT_SOCKETFUNCTION = $CURLOPTTYPE_FUNCTIONPOINT + 1, _
		$CURLMOPT_SOCKETDATA = $CURLOPTTYPE_OBJECTPOINT + 2, _
		$CURLMOPT_PIPELINING = $CURLOPTTYPE_LONG + 3, _
		$CURLMOPT_TIMERFUNCTION = $CURLOPTTYPE_FUNCTIONPOINT + 4, _
		$CURLMOPT_TIMERDATA = $CURLOPTTYPE_OBJECTPOINT + 5, _
		$CURLMOPT_MAXCONNECTS = $CURLOPTTYPE_LONG + 6, _
		$CURLMOPT_MAX_HOST_CONNECTIONS = $CURLOPTTYPE_LONG + 7, _
		$CURLMOPT_MAX_PIPELINE_LENGTH = $CURLOPTTYPE_LONG + 8, _
		$CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE = $CURLOPTTYPE_OFF_T + 9, _
		$CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE = $CURLOPTTYPE_OFF_T + 10, _
		$CURLMOPT_PIPELINING_SITE_BL = $CURLOPTTYPE_OBJECTPOINT + 11, _
		$CURLMOPT_PIPELINING_SERVER_BL = $CURLOPTTYPE_OBJECTPOINT + 12, _
		$CURLMOPT_MAX_TOTAL_CONNECTIONS = $CURLOPTTYPE_LONG + 13, _
		$CURLMOPT_LASTENTRY

Global Const $CURL_BLOB_COPY = 1 ; /* tell libcurl to copy the data */
Global Const $CURL_BLOB_NOCOPY = 0 ; /* tell libcurl to NOT copy the data */

Global Const $tagCURL_BLOB = _
		"ptr data;" & _
		"uint_ptr len;" & _
		"uint flags;" ; /* bit 0 is defined, the rest are reserved and should be left zeroes */


Global Const $tagCURL_HTTPPOST = _
		"ptr next;" & _
		"ptr name;" & _
		"long namelength;" & _
		"ptr contents;" & _
		"long contentslength;" & _
		"ptr buffer;" & _
		"long bufferlength;" & _
		"ptr contenttype;" & _
		"ptr contentheader;" & _
		"ptr more;" & _
		"long flags;" & _
		"ptr showfilename;" & _
		"ptr userp; "

Global Const $tagCURL_FILEINFO = _
		"ptr filename;" & _
		"int filetype;" & _
		"uint_ptr time;" & _
		"uint perm;" & _
		"int uid;" & _
		"int gid;" & _
		"uint64 size;" & _
		"int hardlinks;" & _
		"struct;" & _
		"ptr strings_time;" & _
		"ptr strings_perm;" & _
		"ptr strings_user;" & _
		"ptr strings_group;" & _
		"ptr strings_target;" & _
		"endstruct;" & _
		"uint flags;" & _
		"ptr b_data;" & _
		"uint_ptr b_size;" & _
		"uint_ptr b_used;"

Global Const $tagCURL_SOCKADDR = _
		"int family;" & _
		"int socktype;" & _
		"int protocol;" & _
		"uint addrlen;" & _
		"ushort sa_family;" & _
		"char sa_data[14]"

Global Const $tagCURL_KHKEY = _
		"ptr key;" & _
		"uint_ptr len;" & _
		"int keytype;"

Global Const $tagCURL_FORMS = _
		"int option;" & _
		"ptr value;"

Global Const $tagCURL_SLIST = _
		"ptr data;" & _
		"ptr next;"

Global Const $tagCURL_CERTINFO = _
		"int num_of_certs;" & _
		"ptr certinfo;"

Global Const $tagCURL_TLSSESSIONINFO = _
		"int backend;" & _
		"ptr internals;"

Global Const $tagCURL_VERSION_INFO_DATA = _
		"int age;" & _
		"ptr version;" & _
		"uint version_num;" & _
		"ptr host;" & _
		"int features;" & _
		"ptr ssl_version;" & _
		"long ssl_version_num;" & _
		"ptr libz_version;" & _
		"ptr protocols;" & _
		"ptr ares;" & _
		"int ares_num;" & _
		"ptr libidn;" & _
		"int iconv_ver_num;" & _
		"ptr libssh_version;"

Global Const $tagCURL_VERSION_INFO_DATA_EX = _
		"int age;" & _
		"char version[256];" & _
		"uint version_num;" & _
		"char host[256];" & _
		"int features;" & _
		"char ssl_version[256];" & _
		"long ssl_version_num;" & _
		"char libz_version[256];" & _
		"char protocols[1024];" & _
		"char ares[256];" & _
		"int ares_num;" & _
		"char libidn[256];" & _
		"int iconv_ver_num;" & _
		"char libssh_version[256];"

Global Const $tagCURLMsg = _
		"int msg;" & _
		"ptr easy_handle;" & _
		"ptr data;"

Global Const $tagCURL_WAITFD = _
		"int_ptr fd;" & _
		"short events;" & _
		"short revents;"

#EndRegion constants


Global $g_hlibcurl, $g_oCurlBufferDict = ObjCreate('Scripting.Dictionary')
$g_oCurlBufferDict.CompareMode = 0
__Curl_DllOpen()

; ============================================================================================================================
; Curl Global Functions
; ============================================================================================================================

Func Curl_Data_Put($Handle, $Data)
	__Curl_DictPut($g_oCurlBufferDict, Ptr($Handle), Binary($Data))
EndFunc   ;==>Curl_Data_Put

Func Curl_Data_Get($Handle)
	Return __Curl_DictGet($g_oCurlBufferDict, Ptr($Handle))
EndFunc   ;==>Curl_Data_Get

Func Curl_Data_Cleanup($Handle)
	__Curl_DictDelete($g_oCurlBufferDict, Ptr($Handle))
EndFunc   ;==>Curl_Data_Cleanup

Func Curl_Escape($String, $Encode = 1)
	If $Encode = "ansi" Then $Encode = 1
	If $Encode = "utf16le" Then $Encode = 2
	If $Encode = "utf16be" Then $Encode = 3
	If $Encode = "utf8" Then $Encode = 4
	Return Curl_Easy_Escape(0, $String, $Encode)
EndFunc   ;==>Curl_Escape

Func Curl_Unescape($String, $Encode = 1)
	If $Encode = "ansi" Then $Encode = 1
	If $Encode = "utf16le" Then $Encode = 2
	If $Encode = "utf16be" Then $Encode = 3
	If $Encode = "utf8" Then $Encode = 4
	Return Curl_Easy_Unescape(0, $String, $Encode)
EndFunc   ;==>Curl_Unescape

Func Curl_FormAdd(ByRef $FirstItem, ByRef $LastItem, $Option1, $Value1, $Option2, $Value2 = 0, $Option3 = 0, $Value3 = 0, $Option4 = 0, $Value4 = 0, $Option5 = 0, $Value5 = 0, $Option6 = 0, $Value6 = 0, $Option7 = 0, $Value7 = 0, $Option8 = 0, $Value8 = 0, $Option9 = 0, $Value9 = 0, $Option10 = 0, $Value10 = 0, $Option11 = 0, $Value11 = 0, $Option12 = 0, $Value12 = 0, $Option13 = 0, $Value13 = 0, $Option14 = 0, $Value14 = 0, $Option15 = 0, $Value15 = 0, $Option16 = 0, $Value16 = 0, $Option17 = 0, $Value17 = 0, $Option18 = 0, $Value18 = 0, $Option19 = 0, $Value19 = 0, $Option20 = 0, $Value20 = 0)
	If Mod(@NumParams, 2) <> 1 Then Return $CURL_FORMADD_INCOMPLETE

	Local $Script = 'DllCall($g_hlibcurl, (@AutoItX64 ? "int" : "int:cdecl"), "curl_formadd", "ptr*", $FirstItem, "ptr*", $LastItem'
	For $i = 1 To (@NumParams - 3) / 2
		$Script &= ', "int", $Option' & $i
		If IsString(Eval("Value" & $i)) Then
			$Script &= ', "str", $Value' & $i
		Else
			$Script &= ', "int", $Value' & $i
		EndIf
	Next
	$Script &= ', "int", $Option' & $i & ')'
	Local $Ret = Execute($Script)
	If @error Then Return $CURL_FORMADD_INCOMPLETE

	$FirstItem = $Ret[1]
	$LastItem = $Ret[2]
	Return $Ret[0]
EndFunc   ;==>Curl_FormAdd

Func Curl_FormFree($FirstItem)
	DllCall($g_hlibcurl, (@AutoItX64 ? "none" : "none:cdecl"), 'curl_formfree', "ptr", $FirstItem)
EndFunc   ;==>Curl_FormFree

Func Curl_Free($Ptr)
	DllCall($g_hlibcurl, (@AutoItX64 ? "none" : "none:cdecl"), 'curl_free', "ptr", $Ptr)
EndFunc   ;==>Curl_Free

Func Curl_GetDate($DateString, $Now = 0)
	Return DllCall($g_hlibcurl, (@AutoItX64 ? "int" : "int:cdecl"), 'curl_getdate', "str", $DateString, "int", $Now)[0]
EndFunc   ;==>Curl_GetDate

Func Curl_Global_Cleanup($Flag)
	DllCall($g_hlibcurl, (@AutoItX64 ? "none" : "none:cdecl"), 'curl_global_cleanup')
EndFunc   ;==>Curl_Global_Cleanup

Func Curl_Global_Init($Flag)
	Return DllCall($g_hlibcurl, (@AutoItX64 ? "int" : "int:cdecl"), "curl_global_init", "int", $Flag)[0]
EndFunc   ;==>Curl_Global_Init

Func Curl_Global_Init_Mem($Flag, $MallocCB, $FreeCB, $ReallocCB, $StrdupCB, $CallocCB)
	Return DllCall($g_hlibcurl, (@AutoItX64 ? "int" : "int:cdecl"), "curl_global_init_mem", "int", $Flag, "ptr", $MallocCB, "ptr", $FreeCB, "ptr", $ReallocCB, "ptr", $StrdupCB, "ptr", $CallocCB)[0]
EndFunc   ;==>Curl_Global_Init_Mem

Func Curl_Slist_Append($List, $String = "", $AutoSplit = False)
	If $AutoSplit Then
		Local $Split = StringSplit($String, @LF, 2)
		For $i = 0 To UBound($Split) - 1
			$List = DllCall($g_hlibcurl, (@AutoItX64 ? "ptr" : "ptr:cdecl"), "curl_slist_append", "ptr", $List, "str", StringStripWS($Split[$i], 3))[0]
		Next
		Return $List
	Else
		Return DllCall($g_hlibcurl, (@AutoItX64 ? "ptr" : "ptr:cdecl"), "curl_slist_append", "ptr", $List, "str", $String)[0]
	EndIf
EndFunc   ;==>Curl_Slist_Append

Func Curl_Slist_Free_All($List)
	DllCall($g_hlibcurl, (@AutoItX64 ? "none" : "none:cdecl"), "curl_slist_free_all", "ptr", $List)
EndFunc   ;==>Curl_Slist_Free_All

Func Curl_Version()
	Return DllCall($g_hlibcurl, (@AutoItX64 ? 'str' : 'str:cdecl'), 'curl_version')[0]
EndFunc   ;==>Curl_Version

Func Curl_Version_Info($Type = $CURLVERSION_NOW, $Parse = True)
	Static $SizeOfPtr = DllStructGetSize(DllStructCreate("ptr"))
	Local $Info = DllStructCreate($tagCURL_VERSION_INFO_DATA, DllCall($g_hlibcurl, (@AutoItX64 ? 'ptr' : 'ptr:cdecl'), 'curl_version_info', "int", $Type)[0])
	If Not $Parse Then Return $Info

	Local $InfoEx = DllStructCreate($tagCURL_VERSION_INFO_DATA_EX)
	DllStructSetData($InfoEx, "age", DllStructGetData($Info, "age"))
	DllStructSetData($InfoEx, "version", __Curl_Peek("str", DllStructGetData($Info, "version")))
	DllStructSetData($InfoEx, "version_num", DllStructGetData($Info, "version_num"))
	DllStructSetData($InfoEx, "host", __Curl_Peek("str", DllStructGetData($Info, "host")))
	DllStructSetData($InfoEx, "features", DllStructGetData($Info, "features"))
	DllStructSetData($InfoEx, "ssl_version", __Curl_Peek("str", DllStructGetData($Info, "ssl_version")))
	DllStructSetData($InfoEx, "ssl_version_num", DllStructGetData($Info, "ssl_version_num"))
	DllStructSetData($InfoEx, "libz_version", __Curl_Peek("str", DllStructGetData($Info, "libz_version")))
	DllStructSetData($InfoEx, "ares", __Curl_Peek("str", DllStructGetData($Info, "ares")))
	DllStructSetData($InfoEx, "ares_num", DllStructGetData($Info, "ares_num"))
	DllStructSetData($InfoEx, "libidn", __Curl_Peek("str", DllStructGetData($Info, "libidn")))
	DllStructSetData($InfoEx, "iconv_ver_num", DllStructGetData($Info, "iconv_ver_num"))
	DllStructSetData($InfoEx, "libssh_version", __Curl_Peek("str", DllStructGetData($Info, "libssh_version")))

	Local $Protocols = ""
	Local $Ptr = DllStructGetData($Info, "protocols")
	While 1
		Local $Pstr = __Curl_Peek("ptr", $Ptr)
		If Not $Pstr Then ExitLoop

		If $Protocols Then $Protocols &= ","
		$Protocols &= __Curl_Peek("str", $Pstr)
		$Ptr += $SizeOfPtr
	WEnd
	DllStructSetData($InfoEx, "protocols", $Protocols)

	Return $InfoEx
EndFunc   ;==>Curl_Version_Info

; ============================================================================================================================
; Easy Interface Functions
; ============================================================================================================================

Func Curl_Easy_Escape($Handle, $String, $Encode = 1)
	If $Encode < 1 Or $Encode > 4 Then $Encode = 1
	Local $Binary = StringToBinary($String, $Encode) ; allow Chr(0)
	If Not BinaryLen($Binary) Then Return ""

	Local $Buffer = DllStructCreate("byte[" & BinaryLen($Binary) & "]")
	DllStructSetData($Buffer, 1, $Binary)
	Local $Ptr = DllCall($g_hlibcurl, (@AutoItX64 ? 'ptr' : 'ptr:cdecl'), 'curl_easy_escape', "ptr", $Handle, "struct*", $Buffer, "int", BinaryLen($Binary))[0]
	Local $Ret = __Curl_Peek("str", $Ptr)
	Curl_Free($Ptr)
	Return $Ret
EndFunc   ;==>Curl_Easy_Escape

Func Curl_Easy_Unescape($Handle, $String, $Encode = 1)
	Local $Ret = DllCall($g_hlibcurl, (@AutoItX64 ? "ptr" : "ptr:cdecl"), "curl_easy_unescape", "ptr", $Handle, "str", $String, "int", 0, "int*", 0)
	Local $Ptr = $Ret[0], $Len = $Ret[4]
	If $Len = 0 Then Return ""

	$Ret = __Curl_Peek("byte[" & $Len & "]", $Ptr)
	Curl_Free($Ptr)
	If $Encode < 1 Or $Encode > 4 Then $Encode = 1
	Return BinaryToString($Ret, $Encode)
EndFunc   ;==>Curl_Easy_Unescape

Func Curl_Easy_Init()
	Return DllCall($g_hlibcurl, (@AutoItX64 ? "ptr" : "ptr:cdecl"), 'curl_easy_init')[0]
EndFunc   ;==>Curl_Easy_Init

Func Curl_Easy_Cleanup($Handle)
	DllCall($g_hlibcurl, (@AutoItX64 ? "none" : "none:cdecl"), 'curl_easy_cleanup', "ptr", $Handle)
EndFunc   ;==>Curl_Easy_Cleanup

Func Curl_Easy_DupHandle($Handle)
	Return DllCall($g_hlibcurl, (@AutoItX64 ? "ptr" : "ptr:cdecl"), "curl_easy_duphandle", "ptr", $Handle)[0]
EndFunc   ;==>Curl_Easy_DupHandle

Func Curl_Easy_GetInfo($Handle, $Info)
	Local $Type = 'ptr*', $IsString = False
	If $Info >= $CURLINFO_STRING And $Info < $CURLINFO_LONG Then $IsString = True
	If $Info >= $CURLINFO_LONG And $Info < $CURLINFO_DOUBLE Then $Type = 'long*'
	If $Info >= $CURLINFO_DOUBLE And $Info < $CURLINFO_SLIST Then $Type = 'double*'
	Local $Ret = DllCall($g_hlibcurl, (@AutoItX64 ? "int" : "int:cdecl"), "curl_easy_getinfo", "ptr", $Handle, "uint", $Info, $Type, 0)[3]
	Return $IsString ? ($Ret ? __Curl_Peek("str", $Ret) : Null) : $Ret
EndFunc   ;==>Curl_Easy_GetInfo

Func Curl_Easy_Pause($Handle, $BitMask = $CURLPAUSE_ALL)
	Return DllCall($g_hlibcurl, (@AutoItX64 ? "int" : "int:cdecl"), "curl_easy_pause", "ptr", $Handle, "int", $BitMask)[0]
EndFunc   ;==>Curl_Easy_Pause

Func Curl_Easy_Perform($Handle)
	Return DllCall($g_hlibcurl, (@AutoItX64 ? "int" : "int:cdecl"), 'curl_easy_perform', "ptr", $Handle)[0]
EndFunc   ;==>Curl_Easy_Perform

Func Curl_Easy_Recv($Handle, $BufferLen = 65536)
	If $BufferLen < 1 Then $BufferLen = 1
	Local $tBuffer = DllStructCreate("byte[" & $BufferLen & "]")
	Local $Ret = DllCall($g_hlibcurl, (@AutoItX64 ? "int" : "int:cdecl"), "curl_easy_recv", "ptr", $Handle, "struct*", $tBuffer, "uint_ptr", $BufferLen, "uint_ptr*", 0)
	Local $RecvLen = $Ret[4]
	Return SetExtended($Ret[0], BinaryMid(DllStructGetData($tBuffer, 1), 1, $RecvLen))
EndFunc   ;==>Curl_Easy_Recv

Func Curl_Easy_Reset($Handle)
	DllCall($g_hlibcurl, (@AutoItX64 ? "none" : "none:cdecl"), "curl_easy_reset", "ptr", $Handle)
EndFunc   ;==>Curl_Easy_Reset

Func Curl_Easy_Send($Handle, $Data)

	$Data = Binary($Data)
	Local $DataLen = BinaryLen($Data)
	Local $tBuffer = DllStructCreate("byte[" & $DataLen & "]")
	DllStructSetData($tBuffer, 1, $Data)

	Local $Ret = DllCall($g_hlibcurl, (@AutoItX64 ? "int" : "int:cdecl"), "curl_easy_send", "ptr", $Handle, "struct*", $tBuffer, "uint_ptr", $DataLen, "uint_ptr*", 0)
	Local $SendLen = $Ret[4]
	Return SetExtended($Ret[0], $SendLen)
EndFunc   ;==>Curl_Easy_Send

Func Curl_Easy_Setopt($Handle, $Option, $Value)
	Return DllCall($g_hlibcurl, (@AutoItX64 ? "int" : "int:cdecl"), "curl_easy_setopt", "ptr", $Handle, "int", $Option, IsString($Value) ? "str" : "ptr", $Value)[0]
EndFunc   ;==>Curl_Easy_Setopt

Func Curl_Easy_StrError($ErrorNum)
	Return DllCall($g_hlibcurl, (@AutoItX64 ? "str" : "str:cdecl"), "curl_easy_strerror", "int", $ErrorNum)[0]
EndFunc   ;==>Curl_Easy_StrError


; ============================================================================================================================
; Multi Interface Functions
; ============================================================================================================================

Func Curl_Multi_Add_Handle($Handle, $EzHandle)
	Return DllCall($g_hlibcurl, (@AutoItX64 ? "int" : "int:cdecl"), "curl_multi_add_handle", "ptr", $Handle, "ptr", $EzHandle)[0]
EndFunc   ;==>Curl_Multi_Add_Handle

Func Curl_Multi_Cleanup($Handle)
	Return DllCall($g_hlibcurl, (@AutoItX64 ? "int" : "int:cdecl"), "curl_multi_cleanup", "ptr", $Handle)[0]
EndFunc   ;==>Curl_Multi_Cleanup

Func Curl_Multi_Info_Read($Handle, ByRef $MsgsInQueue)
	Local $Ret = DllCall($g_hlibcurl, (@AutoItX64 ? "ptr" : "ptr:cdecl"), "curl_multi_info_read", "ptr", $Handle, "int*", 0)
	$MsgsInQueue = $Ret[2]

	If $Ret[0] Then Return DllStructCreate($tagCURLMsg, $Ret[0])
	Return Null
EndFunc   ;==>Curl_Multi_Info_Read

Func Curl_Multi_Init()
	Return DllCall($g_hlibcurl, (@AutoItX64 ? "ptr" : "ptr:cdecl"), "curl_multi_init")[0]
EndFunc   ;==>Curl_Multi_Init

Func Curl_Multi_Perform($Handle, ByRef $RunningHandles)
	Local $Ret = DllCall($g_hlibcurl, (@AutoItX64 ? "int" : "int:cdecl"), "curl_multi_perform", "ptr", $Handle, "int*", 0)
	$RunningHandles = $Ret[2]
	Return $Ret[0]
EndFunc   ;==>Curl_Multi_Perform

Func Curl_Multi_Remove_Handle($Handle, $EzHandle)
	Return DllCall($g_hlibcurl, (@AutoItX64 ? "int" : "int:cdecl"), "curl_multi_remove_handle", "ptr", $Handle, "ptr", $EzHandle)[0]
EndFunc   ;==>Curl_Multi_Remove_Handle

Func Curl_Multi_Setopt($Handle, $Option, $Value)
	Return DllCall($g_hlibcurl, (@AutoItX64 ? "int" : "int:cdecl"), "curl_multi_setopt", "ptr", $Handle, "int", $Option, IsString($Value) ? "str" : "ptr", $Value)[0]
EndFunc   ;==>Curl_Multi_Setopt

Func Curl_Multi_StrError($ErrorNum)
	Return DllCall($g_hlibcurl, (@AutoItX64 ? "str" : "str:cdecl"), "curl_multi_strerror", "int", $ErrorNum)[0]
EndFunc   ;==>Curl_Multi_StrError

; ============================================================================================================================
; Public Help Functions
; ============================================================================================================================

Func Curl_DataWriteCallback()
	Static $Ptr = DllCallbackGetPtr(DllCallbackRegister(__Curl_DataWriteCallback, (@AutoItX64 ? "uint_ptr" : "uint_ptr:cdecl"), "ptr;uint_ptr;uint_ptr;ptr"))
	Return $Ptr
EndFunc   ;==>Curl_DataWriteCallback

Func Curl_DataReadCallback()
	Static $Ptr = DllCallbackGetPtr(DllCallbackRegister(__Curl_DataReadCallback, (@AutoItX64 ? "uint_ptr" : "uint_ptr:cdecl"), "ptr;uint_ptr;uint_ptr;ptr"))
	Return $Ptr
EndFunc   ;==>Curl_DataReadCallback

Func Curl_FileWriteCallback()
	Static $Ptr = DllCallbackGetPtr(DllCallbackRegister(__Curl_FileWriteCallback, (@AutoItX64 ? "uint_ptr" : "uint_ptr:cdecl"), "ptr;uint_ptr;uint_ptr;ptr"))
	Return $Ptr
EndFunc   ;==>Curl_FileWriteCallback

Func Curl_FileReadCallback()
	Static $Ptr = DllCallbackGetPtr(DllCallbackRegister(__Curl_FileReadCallback, (@AutoItX64 ? "uint_ptr" : "uint_ptr:cdecl"), "ptr;uint_ptr;uint_ptr;ptr"))
	Return $Ptr
EndFunc   ;==>Curl_FileReadCallback

Func Curl_Slist_ToArray($List)
	Static $PtrSize = DllStructGetSize(DllStructCreate("ptr"))
	Local $Text = ''
	While $List
		Local $Ptr = __Curl_Peek("ptr", $List)
		Local $Line = __Curl_Peek("str", $Ptr)
		$List = __Curl_Peek("ptr", $List + $PtrSize)
		$Text &= $Line & ($List ? Chr(0) : "")
	WEnd
	Return StringSplit($Text, Chr(0), 3)
EndFunc   ;==>Curl_Slist_ToArray

Func Curl_Slist_ToString($List, $sSep = @LF)
	Local $sdata, $tInfo = DllStructCreate($tagCURL_SLIST, $List)
	While Not @error
		$sdata &= __Curl_Peek('str', $tInfo.data) & $sSep
		$tInfo = DllStructCreate($tagCURL_SLIST, $tInfo.Next)
	WEnd
	Return $sdata
EndFunc   ;==>Curl_Slist_ToString

; ============================================================================================================================
; Internal Functions
; ============================================================================================================================

Func __Curl_lstrlenA($Ptr)
	Local $Ret = DllCall('kernel32.dll', "int", "lstrlenA", "ptr", $Ptr)
	If @error Then Return SetError(1, @error, 0)
	Return $Ret[0]
EndFunc   ;==>__Curl_lstrlenA

Func __Curl_lstrlenW($Ptr)
	Local $Ret = DllCall('kernel32.dll', "int", "lstrlenW", "ptr", $Ptr)
	If @error Then Return SetError(1, @error, 0)
	Return $Ret[0]
EndFunc   ;==>__Curl_lstrlenW

Func __Curl_Peek($Type, $Ptr)
	If $Type = "str" Then
		$Type = "char[" & __Curl_lstrlenA($Ptr) & "]"
	ElseIf $Type = "wstr" Then
		$Type = "wchar[" & __Curl_lstrlenW($Ptr) & "]"
	EndIf
	Return DllStructGetData(DllStructCreate($Type, $Ptr), 1)
EndFunc   ;==>__Curl_Peek

Func __Curl_Poke($Type, $Ptr, $Value)
	If $Type = "str" Then
		$Type = "char[" & (StringLen($Value) + 1) & "]"
	ElseIf $Type = "wstr" Then
		$Type = "wchar[" & (StringLen($Value) + 1) & "]"
	EndIf
	DllStructSetData(DllStructCreate($Type, $Ptr), 1, $Value)
EndFunc   ;==>__Curl_Poke

Func __Curl_DictPut(ByRef $Dict, $Key, $Value)
	$Key = String($Key)
	If $Dict.Exists($Key) Then $Dict.Remove($Key)
	$Dict.Add($Key, $Value)
EndFunc   ;==>__Curl_DictPut

Func __Curl_DictGet(ByRef $Dict, $Key)
	$Key = String($Key)
	If $Dict.Exists($Key) Then Return $Dict.Item($Key)
	Return SetError(1, 0, '')
EndFunc   ;==>__Curl_DictGet

Func __Curl_DictDelete(ByRef $Dict, $Key)
	$Key = String($Key)
	If $Dict.Exists($Key) Then $Dict.Remove($Key)
EndFunc   ;==>__Curl_DictDelete

Func __Curl_DataWriteCallback($Ptr, $Size, $Nmemb, $Handle)
	Local $Length = $Size * $Nmemb

	Local $Data = __Curl_Peek("byte[" & $Length & "]", $Ptr)

	Local $Old = __Curl_DictGet($g_oCurlBufferDict, $Handle)
	__Curl_DictPut($g_oCurlBufferDict, $Handle, $Old ? $Old & $Data : $Data)

	Return $Length
EndFunc   ;==>__Curl_DataWriteCallback

Func __Curl_DataReadCallback($Ptr, $Size, $Nmemb, $Handle)
	Local $Length = $Size * $Nmemb
	If $Length = 0 Then Return 0

	Local $Data = __Curl_DictGet($g_oCurlBufferDict, $Handle)

	Local $DataRead = BinaryMid($Data, 1, $Length)
	__Curl_DictPut($g_oCurlBufferDict, $Handle, BinaryMid($Data, $Length + 1))

	__Curl_Poke("byte[" & $Length & "]", $Ptr, $DataRead)
	Return BinaryLen($DataRead)
EndFunc   ;==>__Curl_DataReadCallback

Func __Curl_FileWriteCallback($Ptr, $Size, $Nmemb, $Handle)
	Local $Length = $Size * $Nmemb
	Local $Data = __Curl_Peek("byte[" & $Length & "]", $Ptr)

	FileWrite(Int($Handle), $Data)
	Return $Length
EndFunc   ;==>__Curl_FileWriteCallback

Func __Curl_FileReadCallback($Ptr, $Size, $Nmemb, $Handle)
	Local $Length = $Size * $Nmemb
	If $Length = 0 Then Return 0

	Local $DataRead = FileRead(Int($Handle), $Length)
	If IsString($DataRead) Then
		$DataRead = BinaryMid(StringToBinary($DataRead, 4), 1, $Length)
	EndIf

	__Curl_Poke("byte[" & $Length & "]", $Ptr, $DataRead)
	Return BinaryLen($DataRead)
EndFunc   ;==>__Curl_FileReadCallback


Func __Curl_DllOpen()
	$g_hlibcurl = DllOpen(@AutoItX64 ? 'libcurl-x64.dll' : 'libcurl.dll')
	If $g_hlibcurl = -1 Then MsgBox(16, 'ERROR', 'Error opening ' & (@AutoItX64 ? 'libcurl-x64.dll' : 'libcurl.dll'))
	OnAutoItExitRegister(__Curl_DllClose)
EndFunc   ;==>__Curl_DllOpen

Func __Curl_DllClose()
	DllClose($g_hlibcurl)
EndFunc   ;==>__Curl_DllClose
